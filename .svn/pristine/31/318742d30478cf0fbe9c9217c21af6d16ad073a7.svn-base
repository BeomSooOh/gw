
IF NOT EXISTS (
  SELECT
    *
  FROM
    INFORMATION_SCHEMA.COLUMNS
  WHERE
    TABLE_NAME = 'MA_DEPT' AND COLUMN_NAME = 'GW_INSERT_TIME'
)
BEGIN
  ALTER TABLE MA_DEPT ADD GW_INSERT_TIME DATETIME
 END;

IF NOT EXISTS (
  SELECT
    *
  FROM
    INFORMATION_SCHEMA.COLUMNS
  WHERE
    TABLE_NAME = 'MA_DEPT' AND COLUMN_NAME = 'GW_UPDATE_TIME'
)
BEGIN
  ALTER TABLE MA_DEPT ADD GW_UPDATE_TIME DATETIME
 END;


IF NOT EXISTS (
  SELECT
    *
  FROM
    INFORMATION_SCHEMA.COLUMNS
  WHERE
    TABLE_NAME = 'HR_PHOTO' AND COLUMN_NAME = 'GW_INSERT_TIME'
)
BEGIN
  ALTER TABLE HR_PHOTO ADD GW_INSERT_TIME DATETIME
 END;


IF NOT EXISTS (
  SELECT
    *
  FROM
    INFORMATION_SCHEMA.COLUMNS
  WHERE
    TABLE_NAME = 'HR_PHOTO' AND COLUMN_NAME = 'GW_UPDATE_TIME'
)
BEGIN
  ALTER TABLE HR_PHOTO ADD GW_UPDATE_TIME DATETIME
 END;


IF NOT EXISTS (
  SELECT
    *
  FROM
    INFORMATION_SCHEMA.COLUMNS
  WHERE
    TABLE_NAME = 'MA_CODEDTL' AND COLUMN_NAME = 'GW_INSERT_TIME'
)
BEGIN
  ALTER TABLE MA_CODEDTL ADD GW_INSERT_TIME DATETIME
 END;


IF NOT EXISTS (
  SELECT
    *
  FROM
    INFORMATION_SCHEMA.COLUMNS
  WHERE
    TABLE_NAME = 'MA_CODEDTL' AND COLUMN_NAME = 'GW_UPDATE_TIME'
)
BEGIN
  ALTER TABLE MA_CODEDTL ADD GW_UPDATE_TIME DATETIME
 END;



IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='MA_DEPT_GW_DELETE' AND xtype='U')
BEGIN
CREATE TABLE MA_DEPT_GW_DELETE
(	CD_COMPANY		NVARCHAR(7),
	CD_DEPT			NVARCHAR(12),
	GW_DELETE_TIME	DATETIME
)
END;


IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='MA_USER_GW_DELETE' AND xtype='U')
BEGIN
CREATE TABLE MA_USER_GW_DELETE
(	CD_COMPANY		NVARCHAR(7),
	ID_USER			NVARCHAR(15),
	GW_DELETE_TIME	DATETIME
)
END;


IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='HR_PHOTO_GW_DELETE' AND xtype='U')
BEGIN
CREATE TABLE HR_PHOTO_GW_DELETE
(	CD_COMPANY		NVARCHAR(7),
	NO_EMP			NVARCHAR(10),
	GW_DELETE_TIME	DATETIME
)
END;


IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='MA_EMP_GW_DELETE' AND xtype='U')
BEGIN
CREATE TABLE MA_EMP_GW_DELETE
(	CD_COMPANY		NVARCHAR(7),
	NO_EMP			NVARCHAR(10),
	GW_DELETE_TIME	DATETIME
)
END;


IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='MA_CODEDTL_GW_DELETE' AND xtype='U')
BEGIN
CREATE TABLE MA_CODEDTL_GW_DELETE
(	CD_COMPANY		NVARCHAR(7),
	CD_FIELD		NVARCHAR(10),
	CD_SYSDEF		NVARCHAR(4),
	GW_DELETE_TIME	DATETIME
)
END;




IF OBJECT_ID('TD_HR_PHOTO_GW_BIZBOX') IS NOT NULL       
	DROP TRIGGER TD_HR_PHOTO_GW_BIZBOX;

CREATE TRIGGER [NEOE].[TD_HR_PHOTO_GW_BIZBOX] ON [NEOE].[HR_PHOTO]
FOR DELETE
AS
-- ==========================================
-- DESC				: 사원등록 트리거 ( 추가 )
--  
-- RETURN VALUES
-- ==========================================
-- CHANGE HISTORY
-- ==========================================
-- ==========================================
SET NOCOUNT ON

DECLARE	@P_NO_EMP			NVARCHAR(10),
		@P_CD_COMPANY		NVARCHAR(7),
		@V_CNT				INT

SELECT	@P_NO_EMP			= NO_EMP,
		@P_CD_COMPANY		= CD_COMPANY
FROM 	DELETED

SELECT	@V_CNT = COUNT(*)
FROM	HR_PHOTO_GW_DELETE
WHERE	CD_COMPANY	= @P_CD_COMPANY
AND		NO_EMP		= @P_NO_EMP

BEGIN
	IF (@V_CNT = 1)
	BEGIN
		UPDATE	HR_PHOTO_GW_DELETE
		SET		GW_DELETE_TIME	= GETDATE()
		WHERE	CD_COMPANY		= @P_CD_COMPANY
		AND		NO_EMP			= @P_NO_EMP
	END
	ELSE
	BEGIN
		INSERT INTO HR_PHOTO_GW_DELETE
		(	CD_COMPANY, NO_EMP, GW_DELETE_TIME	)
		VALUES
		(	@P_CD_COMPANY, @P_NO_EMP, GETDATE()	)
	END
END

SET NOCOUNT OFF;



IF OBJECT_ID('TD_MA_CODEDTL_GW_BIZBOX') IS NOT NULL       
	DROP TRIGGER TD_MA_CODEDTL_GW_BIZBOX;

CREATE TRIGGER [NEOE].[TD_MA_CODEDTL_GW_BIZBOX] ON [NEOE].[MA_CODEDTL]
FOR DELETE
AS
-- ==========================================
-- DESC				: 사원등록 트리거 ( 추가 )
--  
-- RETURN VALUES
-- ==========================================
-- CHANGE HISTORY
-- ==========================================
-- ==========================================
SET NOCOUNT ON

DECLARE	@P_CD_FIELD			NVARCHAR(10),
		@P_CD_SYSDEF		NVARCHAR(4),
		@P_CD_COMPANY		NVARCHAR(7),
		@V_CNT				INT

SELECT	@P_CD_FIELD			= CD_FIELD,
		@P_CD_SYSDEF		= CD_SYSDEF,
		@P_CD_COMPANY		= CD_COMPANY
FROM 	DELETED

SELECT	@V_CNT = COUNT(*)
FROM	MA_CODEDTL_GW_DELETE
WHERE	CD_COMPANY		= @P_CD_COMPANY
AND		CD_FIELD		= @P_CD_FIELD
AND		CD_SYSDEF		= @P_CD_SYSDEF

BEGIN
	IF (@V_CNT = 1)
	BEGIN
		UPDATE	MA_CODEDTL_GW_DELETE
		SET		GW_DELETE_TIME	= GETDATE()
		WHERE	CD_COMPANY		= @P_CD_COMPANY
		AND		CD_FIELD		= @P_CD_FIELD
		AND		CD_SYSDEF		= @P_CD_SYSDEF
	END
	ELSE
	BEGIN
		INSERT INTO MA_CODEDTL_GW_DELETE
		(	CD_COMPANY, CD_FIELD, CD_SYSDEF, GW_DELETE_TIME	)
		VALUES
		(	@P_CD_COMPANY, @P_CD_FIELD, @P_CD_SYSDEF, GETDATE()	)
	END
END

SET NOCOUNT OFF;

IF OBJECT_ID('TD_MA_DEPT_GW_BIZBOX') IS NOT NULL       
	DROP TRIGGER TD_MA_DEPT_GW_BIZBOX;

CREATE TRIGGER [NEOE].[TD_MA_DEPT_GW_BIZBOX] ON [NEOE].[MA_DEPT]
FOR DELETE
AS
-- ==========================================
-- DESC				: 사원등록 트리거 ( 추가 )
--  
-- RETURN VALUES
-- ==========================================
-- CHANGE HISTORY
-- ==========================================
-- ==========================================
SET NOCOUNT ON

DECLARE	@P_CD_DEPT			NVARCHAR(12),
		@P_CD_COMPANY		NVARCHAR(7),
		@V_CNT				INT

SELECT	@P_CD_DEPT			= CD_DEPT,
		@P_CD_COMPANY		= CD_COMPANY
FROM 	DELETED

SELECT	@V_CNT = COUNT(*)
FROM	MA_DEPT_GW_DELETE
WHERE	CD_COMPANY	= @P_CD_COMPANY
AND		CD_DEPT		= @P_CD_DEPT

BEGIN
	IF (@V_CNT = 1)
	BEGIN
		UPDATE	MA_DEPT_GW_DELETE
		SET		GW_DELETE_TIME	= GETDATE()
		WHERE	CD_COMPANY	= @P_CD_COMPANY
		AND		CD_DEPT		= @P_CD_DEPT
	END
	ELSE
	BEGIN
		INSERT INTO MA_DEPT_GW_DELETE
		(	CD_COMPANY, CD_DEPT, GW_DELETE_TIME	)
		VALUES
		(	@P_CD_COMPANY, @P_CD_DEPT, GETDATE()	)
	END
END

SET NOCOUNT OFF;


IF OBJECT_ID('TD_MA_EMP_GW_BIZBOX') IS NOT NULL       
	DROP TRIGGER TD_MA_EMP_GW_BIZBOX;

CREATE TRIGGER [NEOE].[TD_MA_EMP_GW_BIZBOX] ON [NEOE].[MA_EMP]
FOR DELETE
AS
-- ==========================================
-- DESC				: 사원등록 트리거 ( 추가 )
--  
-- RETURN VALUES
-- ==========================================
-- CHANGE HISTORY
-- ==========================================
-- ==========================================
SET NOCOUNT ON

DECLARE	@P_NO_EMP			NVARCHAR(10),
		@P_CD_COMPANY		NVARCHAR(7),
		@V_CNT				INT

SELECT	@P_NO_EMP			= NO_EMP,
		@P_CD_COMPANY		= CD_COMPANY
FROM 	DELETED

SELECT	@V_CNT = COUNT(*)
FROM	MA_EMP_GW_DELETE
WHERE	CD_COMPANY	= @P_CD_COMPANY
AND		NO_EMP		= @P_NO_EMP

BEGIN
	IF (@V_CNT = 1)
	BEGIN
		UPDATE	MA_EMP_GW_DELETE
		SET		GW_DELETE_TIME	= GETDATE()
		WHERE	CD_COMPANY		= @P_CD_COMPANY
		AND		NO_EMP			= @P_NO_EMP
	END
	ELSE
	BEGIN
		INSERT INTO MA_EMP_GW_DELETE
		(	CD_COMPANY, NO_EMP, GW_DELETE_TIME	)
		VALUES
		(	@P_CD_COMPANY, @P_NO_EMP, GETDATE()	)
	END
END

SET NOCOUNT OFF;







IF OBJECT_ID('TD_MA_USER_GW_BIZBOX') IS NOT NULL       
	DROP TRIGGER TD_MA_USER_GW_BIZBOX;

CREATE TRIGGER [NEOE].[TD_MA_USER_GW_BIZBOX] ON [NEOE].[MA_USER]
FOR DELETE
AS
-- ==========================================
-- DESC				: 사원등록 트리거 ( 추가 )
--  
-- RETURN VALUES
-- ==========================================
-- CHANGE HISTORY
-- ==========================================
-- ==========================================
SET NOCOUNT ON

DECLARE	@P_ID_USER			NVARCHAR(15),
		@P_CD_COMPANY		NVARCHAR(7),
		@V_CNT				INT

SELECT	@P_ID_USER			= ID_USER,
		@P_CD_COMPANY		= CD_COMPANY
FROM 	DELETED

SELECT	@V_CNT = COUNT(*)
FROM	MA_USER_GW_DELETE
WHERE	CD_COMPANY	= @P_CD_COMPANY
AND		ID_USER		= @P_ID_USER

BEGIN
	IF (@V_CNT = 1)
	BEGIN
		UPDATE	MA_USER_GW_DELETE
		SET		GW_DELETE_TIME	= GETDATE()
		WHERE	CD_COMPANY		= @P_CD_COMPANY
		AND		ID_USER			= @P_ID_USER
	END
	ELSE
	BEGIN
		INSERT INTO MA_USER_GW_DELETE
		(	CD_COMPANY, ID_USER, GW_DELETE_TIME	)
		VALUES
		(	@P_CD_COMPANY, @P_ID_USER, GETDATE()	)
	END
END

SET NOCOUNT OFF;








--##TRANSACTION START##
IF OBJECT_ID('TI_HR_PHOTO_GW_BIZBOX') IS NOT NULL       
	DROP TRIGGER TI_HR_PHOTO_GW_BIZBOX;

CREATE TRIGGER [NEOE].[TI_HR_PHOTO_GW_BIZBOX] ON [NEOE].[HR_PHOTO]
FOR INSERT
AS
-- ==========================================
-- DESC				: 사진 트리거 ( 추가 )
--  
-- RETURN VALUES
-- ==========================================
-- CHANGE HISTORY
-- ==========================================
-- ==========================================
SET NOCOUNT ON

DECLARE	@P_NO_EMP			NVARCHAR(10),
		@P_CD_COMPANY		NVARCHAR(7)

SELECT	@P_NO_EMP			= NO_EMP,
		@P_CD_COMPANY		= CD_COMPANY
FROM 	INSERTED

BEGIN
	UPDATE	HR_PHOTO
	SET		GW_INSERT_TIME	= GETDATE()
	WHERE	CD_COMPANY		= @P_CD_COMPANY
	AND		NO_EMP			= @P_NO_EMP
END

SET NOCOUNT OFF;



IF OBJECT_ID('TI_MA_CODEDTL_GW_BIZBOX') IS NOT NULL       
	DROP TRIGGER TI_MA_CODEDTL_GW_BIZBOX;

CREATE TRIGGER [NEOE].[TI_MA_CODEDTL_GW_BIZBOX] ON [NEOE].[MA_CODEDTL]
FOR INSERT
AS
-- ==========================================
-- DESC				: 사원등록 트리거 ( 추가 )
--  
-- RETURN VALUES
-- ==========================================
-- CHANGE HISTORY
-- ==========================================
-- ==========================================
SET NOCOUNT ON

DECLARE	@P_CD_FIELD			NVARCHAR(10),
		@P_CD_SYSDEF		NVARCHAR(4),
		@P_CD_COMPANY		NVARCHAR(7)

SELECT	@P_CD_FIELD			= CD_FIELD,
		@P_CD_SYSDEF		= CD_SYSDEF,
		@P_CD_COMPANY		= CD_COMPANY
FROM 	INSERTED

BEGIN
	UPDATE	MA_CODEDTL
	SET		GW_INSERT_TIME	= GETDATE()
	WHERE	CD_COMPANY		= @P_CD_COMPANY
	AND		CD_FIELD		= @P_CD_FIELD
	AND		CD_SYSDEF		= @P_CD_SYSDEF
END

SET NOCOUNT OFF;


IF OBJECT_ID('TI_MA_DEPT_GW_BIZBOX') IS NOT NULL       
	DROP TRIGGER TI_MA_DEPT_GW_BIZBOX;

CREATE TRIGGER [NEOE].[TI_MA_DEPT_GW_BIZBOX] ON [NEOE].[MA_DEPT]
FOR INSERT
AS
-- ==========================================
-- DESC				: 부서정보등록 트리거 ( 추가 )
--  
-- RETURN VALUES
-- ==========================================
-- CHANGE HISTORY
-- ==========================================
-- ==========================================
SET NOCOUNT ON

DECLARE	@P_CD_DEPT			NVARCHAR(12),
		@P_CD_COMPANY		NVARCHAR(7),
		@P_CD_BIZAREA		NVARCHAR(7)

SELECT	@P_CD_DEPT			= CD_DEPT,
		@P_CD_COMPANY		= CD_COMPANY,
		@P_CD_BIZAREA		= CD_BIZAREA		
FROM 	INSERTED

BEGIN
	UPDATE	MA_DEPT
	SET		GW_INSERT_TIME	= GETDATE()
	WHERE	CD_COMPANY		= @P_CD_COMPANY
	AND		CD_BIZAREA		= @P_CD_BIZAREA
	AND		CD_DEPT			= @P_CD_DEPT
END

SET NOCOUNT OFF;






--##TRANSACTION START##
IF OBJECT_ID('TI_MA_EMP_GW_BIZBOX') IS NOT NULL       
	DROP TRIGGER TI_MA_EMP_GW_BIZBOX;

CREATE TRIGGER [NEOE].[TI_MA_EMP_GW_BIZBOX] ON [NEOE].[MA_EMP]
FOR INSERT
AS
-- ==========================================
-- DESC				: 사원등록 트리거 ( 추가 )
--  
-- RETURN VALUES
-- ==========================================
-- CHANGE HISTORY
-- ==========================================
-- ==========================================
SET NOCOUNT ON

DECLARE	@P_NO_EMP			NVARCHAR(10),
		@P_CD_COMPANY		NVARCHAR(7)

SELECT	@P_NO_EMP			= NO_EMP,
		@P_CD_COMPANY		= CD_COMPANY
FROM 	INSERTED

BEGIN
	UPDATE	MA_EMP
	SET		GW_INSERT_TIME	= GETDATE()
	WHERE	CD_COMPANY		= @P_CD_COMPANY
	AND		NO_EMP			= @P_NO_EMP
END

SET NOCOUNT OFF;








--##TRANSACTION START##
IF OBJECT_ID('TI_MA_USER_GW_BIZBOX') IS NOT NULL       
	DROP TRIGGER TI_MA_USER_GW_BIZBOX;

CREATE TRIGGER [NEOE].[TI_MA_USER_GW_BIZBOX] ON [NEOE].[MA_USER]
FOR INSERT
AS
-- ==========================================
-- DESC				: 사원 트리거 ( 추가 )
--  
-- RETURN VALUES
-- ==========================================
-- CHANGE HISTORY
-- ==========================================
-- ==========================================
SET NOCOUNT ON

DECLARE	@P_ID_USER			NVARCHAR(15),
		@P_CD_COMPANY		NVARCHAR(7)

SELECT	@P_ID_USER			= ID_USER,
		@P_CD_COMPANY		= CD_COMPANY
FROM 	INSERTED

BEGIN
	UPDATE	MA_USER
	SET		GW_INSERT_TIME	= GETDATE()
	WHERE	CD_COMPANY		= @P_CD_COMPANY
	AND		ID_USER			= @P_ID_USER
END

SET NOCOUNT OFF;






--##TRANSACTION START##
IF OBJECT_ID('TU_HR_PHOTO_GW_BIZBOX') IS NOT NULL       
	DROP TRIGGER TU_HR_PHOTO_GW_BIZBOX;

CREATE TRIGGER [NEOE].[TU_HR_PHOTO_GW_BIZBOX] ON [NEOE].[HR_PHOTO]
FOR UPDATE
AS
-- ==========================================
-- DESC				: 사진 트리거 ( 추가 )
--  
-- RETURN VALUES
-- ==========================================
-- CHANGE HISTORY
-- ==========================================
-- ==========================================
SET NOCOUNT ON

DECLARE	@P_NO_EMP			NVARCHAR(10),
		@P_CD_COMPANY		NVARCHAR(7)

SELECT	@P_NO_EMP			= NO_EMP,
		@P_CD_COMPANY		= CD_COMPANY
FROM 	INSERTED

BEGIN
	UPDATE	HR_PHOTO
	SET		GW_UPDATE_TIME	= GETDATE()
	WHERE	CD_COMPANY		= @P_CD_COMPANY
	AND		NO_EMP			= @P_NO_EMP
END

SET NOCOUNT OFF;








--##TRANSACTION START##
IF OBJECT_ID('TU_MA_CODEDTL_GW_BIZBOX') IS NOT NULL       
	DROP TRIGGER TU_MA_CODEDTL_GW_BIZBOX;

CREATE TRIGGER [NEOE].[TU_MA_CODEDTL_GW_BIZBOX] ON [NEOE].[MA_CODEDTL]
FOR INSERT
AS
-- ==========================================
-- DESC				: 사원등록 트리거 ( 추가 )
--  
-- RETURN VALUES
-- ==========================================
-- CHANGE HISTORY
-- ==========================================
-- ==========================================
SET NOCOUNT ON

DECLARE	@P_CD_FIELD			NVARCHAR(10),
		@P_CD_SYSDEF		NVARCHAR(4),
		@P_CD_COMPANY		NVARCHAR(7)

SELECT	@P_CD_FIELD			= CD_FIELD,
		@P_CD_SYSDEF		= CD_SYSDEF,
		@P_CD_COMPANY		= CD_COMPANY
FROM 	INSERTED

BEGIN
	UPDATE	MA_CODEDTL
	SET		GW_UPDATE_TIME	= GETDATE()
	WHERE	CD_COMPANY		= @P_CD_COMPANY
	AND		CD_FIELD		= @P_CD_FIELD
	AND		CD_SYSDEF		= @P_CD_SYSDEF
END

SET NOCOUNT OFF;







--##TRANSACTION START##
IF OBJECT_ID('TU_MA_DEPT_GW_BIZBOX') IS NOT NULL       
	DROP TRIGGER TU_MA_DEPT_GW_BIZBOX;

CREATE TRIGGER [NEOE].[TU_MA_DEPT_GW_BIZBOX] ON [NEOE].[MA_DEPT]
FOR UPDATE
AS
-- ==========================================
-- DESC				: 부서정보등록 트리거 ( 추가 )
--  
-- RETURN VALUES
-- ==========================================
-- CHANGE HISTORY
-- ==========================================
-- ==========================================
SET NOCOUNT ON

DECLARE	@P_CD_DEPT			NVARCHAR(12),
		@P_CD_COMPANY		NVARCHAR(7),
		@P_CD_BIZAREA		NVARCHAR(7)

SELECT	@P_CD_DEPT			= CD_DEPT,
		@P_CD_COMPANY		= CD_COMPANY,
		@P_CD_BIZAREA		= CD_BIZAREA		
FROM 	INSERTED

BEGIN
	UPDATE	MA_DEPT
	SET		GW_UPDATE_TIME	= GETDATE()
	WHERE	CD_COMPANY		= @P_CD_COMPANY
	AND		CD_BIZAREA		= @P_CD_BIZAREA
	AND		CD_DEPT			= @P_CD_DEPT
END

SET NOCOUNT OFF;








--##TRANSACTION START##
IF OBJECT_ID('TU_MA_EMP_GW_BIZBOX') IS NOT NULL       
	DROP TRIGGER TU_MA_EMP_GW_BIZBOX;

CREATE TRIGGER [NEOE].[TU_MA_EMP_GW_BIZBOX] ON [NEOE].[MA_EMP]
FOR UPDATE
AS
-- ==========================================
-- DESC				: 사원등록 트리거 ( 추가 )
--  
-- RETURN VALUES
-- ==========================================
-- CHANGE HISTORY
-- ==========================================
-- ==========================================
SET NOCOUNT ON

DECLARE	@P_NO_EMP			NVARCHAR(10),
		@P_CD_COMPANY		NVARCHAR(7)

SELECT	@P_NO_EMP			= NO_EMP,
		@P_CD_COMPANY		= CD_COMPANY
FROM 	INSERTED

BEGIN
	UPDATE	MA_EMP
	SET		GW_UPDATE_TIME	= GETDATE()
	WHERE	CD_COMPANY		= @P_CD_COMPANY
	AND		NO_EMP			= @P_NO_EMP
END

SET NOCOUNT OFF;



--##TRANSACTION START##
IF OBJECT_ID('TU_MA_USER_GW_BIZBOX') IS NOT NULL       
	DROP TRIGGER TU_MA_USER_GW_BIZBOX;

CREATE TRIGGER [NEOE].[TU_MA_USER_GW_BIZBOX] ON [NEOE].[MA_USER]
FOR UPDATE
AS
-- ==========================================
-- DESC				: 사원등록 트리거 ( 추가 )
--  
-- RETURN VALUES
-- ==========================================
-- CHANGE HISTORY
-- ==========================================
-- ==========================================
SET NOCOUNT ON

DECLARE	@P_ID_USER			NVARCHAR(15),
		@P_CD_COMPANY		NVARCHAR(7)

SELECT	@P_ID_USER			= ID_USER,
		@P_CD_COMPANY		= CD_COMPANY
FROM 	INSERTED

BEGIN
	UPDATE	MA_USER
	SET		GW_UPDATE_TIME	= GETDATE()
	WHERE	CD_COMPANY		= @P_CD_COMPANY
	AND		ID_USER			= @P_ID_USER
END

SET NOCOUNT OFF;