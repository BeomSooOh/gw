<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//iBATIS.com//DTD SQL Map 2.0//EN" "http://www.ibatis.com/dtd/sql-map-2.dtd">
<sqlMap namespace="AccMoneyAuthDAO">
	<typeAlias  alias="egovMap" type="egovframework.rte.psl.dataaccess.util.EgovMap"/>

	<!-- 조회 -->
	<!-- 조회 - 권한목록 조회  -->
	<select id="AccMoneyAuthDAO.AuthListInfoSelect" resultClass="hashmap" parameterClass="hashmap">
    	/* AccMoneyAuthDAO.AuthListInfoSelect - mariaDB */
		SELECT     A.auth_code 
				 , B.auth_code_nm 
				 , $DB_NEOS$get_code_detail_info('0', 'COM521',  IFNULL(A.use_yn, 'N'), #langCode#) AS use_yn	 
				 , C.erp_co_cd
				 , IFNULL(cnt, 0) emp_cnt 
				 <isEqual property="userSe" compareValue="ADMIN">
				 , 0 as comp_cnt
				 </isEqual>
				 <isEqual property="userSe" compareValue="MASTER">
				 , comp_cnt 
				 </isEqual>
				 , C.erp_co_cd_name
				 , A.order_num
		FROM     $DB_NEOS$t_smart_authcode	 	 A
		JOIN	 $DB_NEOS$t_smart_authcode_multi  B
			ON	 A.auth_code = B.auth_code
		INNER JOIN 	(
			SELECT	DISTINCT auth_code, erp_co_cd, erp_co_cd_name
			FROM	$DB_NEOS$t_smart_authcode_menu
		)	C
			ON	 A.auth_code = C.auth_code
		LEFT OUTER JOIN (
			SELECT auth_code, COUNT(auth_code) AS cnt
			FROM  $DB_NEOS$t_smart_authcode_emp 
			<isEqual property="userSe" compareValue="ADMIN">
			WHERE  comp_seq = #compSeq# 
			</isEqual>	
			GROUP BY auth_code
		) D
			ON A.auth_code = D.auth_code
		 INNER JOIN (
	      select auth_code, count(auth_code) as comp_cnt
	      from   (
	          SELECT	DISTINCT auth_code, erp_co_cd, erp_co_cd_name
	          FROM	$DB_NEOS$t_smart_authcode_menu
	      ) E
	      group by auth_code
	    )  F
	    ON A.auth_code = F.auth_code	
		<isEqual property="userSe" compareValue="ADMIN">
		INNER JOIN $DB_NEOS$t_co_erp		tce
			ON		tce.erp_comp_seq = C.erp_co_cd
		</isEqual>
		WHERE (A.auth_code LIKE 'A%' OR A.auth_code LIKE 'U%')
		<isEqual property="userSe" compareValue="ADMIN">
			AND tce.comp_seq = #compSeq#
		</isEqual>
		<isNotEmpty property="erpSeq">
			AND C.erp_co_cd = #erpSeq#
		</isNotEmpty>
			AND B.auth_code_nm like CONCAT('%', ifnull(#authName#,''), '%')
		GROUP BY auth_code
		
		
		UNION
		
		SELECT   A.auth_code,
			 B.auth_code_nm,
			 $DB_NEOS$get_code_detail_info('0', 'COM521',  IFNULL(A.use_yn, 'N'), #langCode#) AS use_yn,
			 '' AS erp_co_cde,
			 IFNULL(cnt, 0) AS emp_cnt,
			 0 AS comp_cnt,
			 '' AS erp_co_cd_name,
			 1 AS order_num
		 FROM    $DB_NEOS$t_smart_authcode 	A
		 JOIN	 $DB_NEOS$t_smart_authcode_multi B
		 ON	 A.auth_code = B.auth_code
		 LEFT OUTER JOIN (
		 	SELECT 'USERREG' as 'auth_code', COUNT(auth_code) cnt
		 	FROM   $DB_NEOS$t_smart_authcode_emp
		 	WHERE  auth_code NOT LIKE 'A%' AND auth_code != 'USERREG'
	 	<isEqual property="userSe" compareValue="ADMIN">
			AND comp_seq = #compSeq#
		</isEqual>
		 ) C
		 ON	A.auth_code = C.auth_code
		 WHERE   A.auth_code NOT LIKE 'A%' AND	 A.auth_code = 'USERREG'
		GROUP BY C.auth_code	

		ORDER BY order_num DESC
    </select>
    
   	<select id="AccMoneyAuthDAO.AuthListInfoSearchSelect" resultClass="hashmap" parameterClass="hashmap">
    	/* AccMoneyAuthDAO.AuthListInfoSearchSelect - mariaDB */
		SELECT   A.auth_code, 
			 B.auth_code_nm, 
			 $DB_NEOS$get_code_detail_info('0', 'COM521',  IFNULL(A.use_yn, 'N'), #langCode#) AS use_yn,	 
			 C.erp_co_cd, 
			 IFNULL(cnt, 0) emp_cnt, 
			 C.erp_co_cd_name,
			 A.order_num
			 
		FROM     $DB_NEOS$t_smart_authcode	 A
		JOIN	 $DB_NEOS$t_smart_authcode_multi  B
		ON	 A.auth_code = B.auth_code
			INNER JOIN 	(
				SELECT	DISTINCT auth_code, erp_co_cd, erp_co_cd_name
				FROM	$DB_NEOS$t_smart_authcode_menu
			)	C
		ON	 A.auth_code = C.auth_code
		LEFT OUTER JOIN (
			SELECT auth_code, COUNT(auth_code) AS cnt
			FROM  $DB_NEOS$t_smart_authcode_emp 	
			GROUP BY auth_code
		) D
		ON A.auth_code = D.auth_code
		WHERE (A.auth_code LIKE 'A%' OR A.auth_code LIKE 'U%')
		<isNotEmpty property="erpSeq">
			AND C.erp_co_cd = #erpSeq#
		</isNotEmpty>
			AND B.auth_code_nm like CONCAT('%', ifnull(#authName#), '%')
		
		UNION
		
		SELECT   A.auth_code,
			 B.auth_code_nm,
			 $DB_NEOS$get_code_detail_info('0', 'COM521',  IFNULL(A.use_yn, 'N'), #langCode#) AS use_yn,
			 '' AS erp_co_cde,
			 IFNULL(COUNT(B.auth_code_nm), 0) AS emp_cnt,
			 '' AS erp_co_cd_name,
			 1 AS order_num
		 FROM    $DB_NEOS$t_smart_authcode 	A
		 JOIN	 $DB_NEOS$t_smart_authcode_multi B
		 ON	 A.auth_code = B.auth_code
		 WHERE   A.auth_code NOT LIKE 'A%' AND A.auth_code != 'USERREG'
		GROUP BY auth_code_nm	
		
		ORDER BY order_num DESC
    </select>
    
	<!-- 조회 - 권한대상자 조회 -->
	<select id="AccMoneyAuthDAO.AuthEmpListInfoSelect" resultClass="hashmap" parameterClass="hashmap">
			/* AccMoneyAuthDAO.AuthEmpListInfoSelect - mariaDB */			
			SELECT	ed.group_seq	'groupSeq'
				, ed.comp_seq	'compSeq'
				, ed.dept_seq	'deptSeq'
				, ed.emp_seq	'empSeq'
				, ''	AS	'parentDeptSeq'
				, CONCAT('(',e.login_id,')')	AS 'empNameAdv'
				, cm.comp_name	'compName'
				, dm.dept_name	'deptName'
				, em.emp_name	'empName'
				, ''	AS 	'pathName'
				, ''	AS	'deptPath'
				, ($DB_NEOS$get_emp_duty_position_name(ed.group_seq,ed.comp_seq, ed.duty_code, 'DUTY', e.native_lang_code))		AS 'dutyName'
				, ($DB_NEOS$get_emp_duty_position_name(ed.group_seq,ed.comp_seq, ed.position_code, 'POSITION', e.native_lang_code))	AS 'positionName'
				, e.duty_code 	AS	'dutyCode'
				, e.position_code 	AS	'positionCode'
				, 'u'	AS 	'empDeptFlag'
				, CONCAT (ed.group_seq, '|', ed.comp_seq, '|', ed.dept_seq,'|', ed.emp_seq, '|u')	'superKey'
				, IFNULL(sae.auth_code, '') AS authCode
				, IFNULL(sam.auth_code_nm, '') AS authCodeName
				, vc.path
			FROM	$DB_NEOS$t_co_emp	e
			LEFT JOIN $DB_NEOS$t_co_emp_dept ed
				ON	e.emp_seq = ed.emp_seq AND e.group_seq = ed.group_seq
			LEFT JOIN $DB_NEOS$t_co_comp c
				ON	e.group_seq = c.group_seq AND ed.comp_seq = c.comp_seq
			LEFT JOIN $DB_NEOS$t_co_emp_comp ec
				ON	ec.comp_seq = c.comp_seq AND e.emp_seq = ec.emp_seq
			INNER JOIN $DB_NEOS$t_co_comp_multi cm
				ON c.comp_seq = cm.comp_seq AND cm.lang_code = 'kr'
			INNER JOIN $DB_NEOS$t_co_dept_multi dm
				ON dm.group_seq = e.group_seq AND c.comp_seq = dm.comp_seq AND ed.dept_Seq = dm.dept_Seq AND dm.lang_code = 'kr'
			INNER JOIN $DB_NEOS$t_co_emp_multi em
				ON em.emp_seq = e.emp_seq AND e.group_seq = em.group_seq AND em.lang_code = 'kr'
			INNER JOIN $DB_NEOS$t_co_comp_duty_position dP
				ON 	e.group_seq = dP.group_seq
				AND	dP.dp_type = 'POSITION'
				AND 	e.position_code = dP.dp_seq
			INNER JOIN $DB_NEOS$t_co_comp_duty_position dD
				ON 	e.group_seq = dD.group_seq
				AND	dD.dp_type = 'DUTY'
				AND 	e.duty_code = dD.dp_seq
			LEFT OUTER JOIN $DB_NEOS$t_smart_authcode_emp sae
				ON	e.emp_seq = sae.emp_seq
			LEFT OUTER JOIN $DB_NEOS$t_smart_authcode_multi sam
				ON	sae.auth_code = sam.auth_code	
			INNER JOIN	$DB_NEOS$v_org_chart vc
				ON	ed.dept_seq = vc.dept_seq
			WHERE	e.group_seq = #groupSeq#
			AND		ed.dept_seq	= #selectedId#
			AND	ed.orgchart_display_yn = 'Y'
			AND 	ec.use_yn 		= 'Y'
			AND	ec.work_status IN ('999','004')
			ORDER BY dP.order_num, dD.order_num, e.join_day, em.emp_name
	</select>

	<!-- 조회 - 검색 -->
	<select id="AccMoneyAuthDAO.AuthEmpListInfoSearchSelect" resultClass="hashmap" parameterClass="hashmap">
			/* AccMoneyAuthDAO.AuthEmpListInfoSelect - mariaDB */
			SELECT	ed.group_seq	'groupSeq'
				, ed.comp_seq	'compSeq'
				, ed.dept_seq	'deptSeq'
				, ed.emp_seq	'empSeq'
				, ''	AS	'parentDeptSeq'
				, CONCAT('(',e.login_id,')')	AS 'empNameAdv'
				, cm.comp_name	'compName'
				, dm.dept_name	'deptName'
				, em.emp_name	'empName'
				, ''	AS 	'pathName'
				, ''	AS	'deptPath'
				, ($DB_NEOS$get_emp_duty_position_name(ed.group_seq,ed.comp_seq, ed.duty_code, 'DUTY', e.native_lang_code))		AS 'dutyName'
				, ($DB_NEOS$get_emp_duty_position_name(ed.group_seq,ed.comp_seq, ed.position_code, 'POSITION', e.native_lang_code))	AS 'positionName'
				, e.duty_code 	AS	'dutyCode'
				, e.position_code 	AS	'positionCode'
				, 'u'	AS 	'empDeptFlag'
				, CONCAT (ed.group_seq, '|', ed.comp_seq, '|', ed.dept_seq,'|', ed.emp_seq, '|u')	'superKey'
				, IFNULL(sae.auth_code, '') AS authCode
				, IFNULL(sam.auth_code_nm, '') AS authCodeName
				, vc.path
			FROM	$DB_NEOS$t_co_emp	e
			LEFT JOIN $DB_NEOS$t_co_emp_dept ed
				ON	e.emp_seq = ed.emp_seq AND e.group_seq = ed.group_seq
			LEFT JOIN $DB_NEOS$t_co_comp c
				ON	e.group_seq = c.group_seq AND ed.comp_seq = c.comp_seq
			LEFT JOIN $DB_NEOS$t_co_emp_comp ec
				ON	ec.comp_seq = c.comp_seq AND e.emp_seq = ec.emp_seq
			INNER JOIN $DB_NEOS$t_co_comp_multi cm
				ON c.comp_seq = cm.comp_seq AND cm.lang_code = 'kr'
			INNER JOIN $DB_NEOS$t_co_dept_multi dm
				ON dm.group_seq = e.group_seq AND c.comp_seq = dm.comp_seq AND ed.dept_Seq = dm.dept_Seq AND dm.lang_code = 'kr'
			INNER JOIN $DB_NEOS$t_co_emp_multi em
				ON em.emp_seq = e.emp_seq AND e.group_seq = em.group_seq AND em.lang_code = 'kr'
			INNER JOIN $DB_NEOS$t_co_comp_duty_position dP
				ON 	e.group_seq = dP.group_seq
				AND	dP.dp_type = 'POSITION'
				AND 	e.position_code = dP.dp_seq
			INNER JOIN $DB_NEOS$t_co_comp_duty_position dD
				ON 	e.group_seq = dD.group_seq
				AND	dD.dp_type = 'DUTY'
				AND 	e.duty_code = dD.dp_seq
			LEFT OUTER JOIN $DB_NEOS$t_smart_authcode_emp sae
				ON	e.emp_seq = sae.emp_seq
			LEFT OUTER JOIN $DB_NEOS$t_smart_authcode_multi sam
				ON	sae.auth_code = sam.auth_code	
			INNER JOIN	$DB_NEOS$v_org_chart vc
				ON	ed.dept_seq = vc.dept_seq
			WHERE	e.group_seq 	= #groupSeq#
			AND	em.emp_name like concat('%', ifnull(#search#,''), '%')	
			<isNotEmpty property="selectCompSeq">
			AND		c.comp_seq = #selectCompSeq#	
			</isNotEmpty>	
			AND	ed.orgchart_display_yn = 'Y'
			AND 	ec.use_yn 		= 'Y'
			AND	ec.work_status IN ('999','004')
			ORDER BY dP.order_num, dD.order_num, e.join_day, em.emp_name
	</select>
	
	<!-- 조회 - 메뉴목록 조회 -->
	<select id="AccMoneyAuthDAO.AuthMenuListInfoSelect" resultClass="hashmap" parameterClass="hashmap">
		/* AccMoneyAuthDAO.AuthMenuListInfoSelect - mariaDB */
        SELECT A.detail_code, $DB_NEOS$FN_GetMultiLang(#langCode#, B.detail_name_multi) as detail_name
		FROM   $DB_NEOS$t_co_code_detail A
		JOIN   $DB_NEOS$v_t_co_code_detail_multi B
		ON     A.code = B.code and A.detail_code = B.detail_code
		WHERE  A.code = 'ac0001'
		
		UNION
		
		SELECT '' as detail_code, $DB_NEOS$FN_GetMultiLang(#langCode#, name_multi) as detail_name
		FROM   $DB_NEOS$t_co_code A
		JOIN   $DB_NEOS$v_t_co_code_multi B
		ON     A.code = B.code
		WHERE  A.code = 'ac0001'
    </select>
	<!-- 조회 - ERP 조직도 정보 조회 -->
	
	<!-- 조회 - GW ERP 정보 조회 -->
	<select id = "AccMoneyAuthDAO.GWErpInfoSelect" resultClass="hashmap" parameterClass="hashmap">
		/* AccMoneyAuthDAO.GWErpInfoSelect - mariaDB */
		SELECT 		A.group_seq, 
					A.comp_seq, 
					A.erp_seq, 
					A.erp_type_code, 
					A.database_type, 
					A.driver, 
					A.url, 
					A.userid, 
					A.password, 
					A.erp_comp_seq, 
					A.erp_comp_name, 
					A.use_yn,
					$DB_NEOS$FN_GetMultiLang(#langCode#, B.comp_name_multi) AS comp_name
		FROM  		$DB_NEOS$t_co_erp A
		INNER JOIN	$DB_NEOS$v_t_co_comp_multi B
		ON			A.comp_seq = B.comp_seq
		WHERE  		A.group_seq = #groupSeq# 
		AND			A.erp_type_code = #erpType# 
		AND 		A.achr_gbn = #erpGubun#
		<isEqual property="userSe" compareValue="ADMIN">
		AND			A.comp_seq = #compSeq#	
		</isEqual>
	</select>
	
	<select id="AccMoneyAuthDAO.AuthMappingData" resultClass="hashmap" parameterClass="hashmap">
		/* AccMoneyAuthDAO.AuthMappingData - mariaDB */
		SELECT 		sam.auth_code,
		    IFNULL(emp_seq, '') AS emp_seq,
		    sam.erp_co_cd,
		    sam.erp_biz_cd ,
		    sa.etc,
		    sa.use_yn,
		    saMul.auth_code_nm,
		    sam.erp_co_cd_name,
		    sam.erp_biz_cd_name,
		    sa.comp_seq,
		    GROUP_CONCAT(DISTINCT sam.menu_code ORDER BY sam.menu_code ASC SEPARATOR '|') AS menu_code
		FROM  		$DB_NEOS$t_smart_authcode_menu sam
		INNER JOIN	$DB_NEOS$t_smart_authcode sa
		ON		sam.auth_code = sa.auth_code
		AND		sam.comp_seq = sa.comp_seq
		INNER JOIN 	$DB_NEOS$t_smart_authcode_multi saMul
		ON		sa.auth_code = saMul.auth_code
		WHERE  		sam.auth_code = #authCode#
		GROUP BY 	comp_seq, erp_co_cd, erp_biz_cd, erp_biz_cd_name
	</select>

	<!-- 조회 - 권한 사용자 조회 -->
	<select id="AccMoneyAuthDAO.AccPopAuthUserSelect" resultClass="hashmap" parameterClass="hashmap">
		/* AccMoneyAuthDAO.AccPopAuthUserSelect - mariaDB */
		SELECT   A.auth_code, 
			 B.auth_code_nm, 
			 $DB_NEOS$get_code_detail_info('0', 'COM521',  IFNULL(A.use_yn, 'N'), #langCode#) AS use_yn,	 
			 C.erp_co_cd, 
			 C.erp_co_cd_name,
			 comp_cnt,
			 D.emp_seq,
			 $DB_NEOS$FN_GetMultiLang(#langCode#, (select dept_name_multi from $DB_NEOS$v_t_co_dept_multi where dept_seq = ed.dept_seq)) as dept_name,
			 $DB_NEOS$FN_GetMultiLang(#langCode#, (select comp_name_multi from $DB_NEOS$v_t_co_comp_multi where comp_seq = ed.comp_seq)) as comp_name,
			 $DB_NEOS$get_emp_duty_position_name(e.group_seq, ed.comp_seq, e.position_code, 'POSITION', #langCode#) AS position_code_name,
			 $DB_NEOS$FN_GetMultiLang(#langCode#, (select emp_name_multi from $DB_NEOS$v_t_co_emp_multi where emp_seq = e.emp_seq)) as emp_name,
			 e.login_id,
			 ed.dept_seq,
			 ed.comp_seq,
			 e.group_seq,
			 vo.path
		FROM     $DB_NEOS$t_smart_authcode	 A
		JOIN	 $DB_NEOS$t_smart_authcode_multi  B
		ON	 A.auth_code = B.auth_code
			INNER JOIN 	(
				SELECT	DISTINCT auth_code, erp_co_cd, erp_co_cd_name
				FROM	$DB_NEOS$t_smart_authcode_menu
			)	C
		ON	 A.auth_code = C.auth_code
		JOIN    (
				SELECT COUNT(erp_co_cd) AS comp_cnt, auth_code
				FROM  ( 
					SELECT DISTINCT auth_code, erp_co_cd
					FROM   $DB_NEOS$t_smart_authcode_menu
				) T
				GROUP BY auth_code
		) E	
		ON A.auth_code = E.auth_code
		RIGHT OUTER JOIN $DB_NEOS$t_smart_authcode_emp D
			ON      A.auth_code = D.auth_code
		JOIN $DB_NEOS$t_co_emp e
			ON	D.emp_seq = e.emp_seq 
		LEFT JOIN $DB_NEOS$t_co_emp_dept ed
			ON	e.emp_seq = ed.emp_seq AND e.group_seq = ed.group_seq and ed.comp_seq = D.comp_seq and D.dept_seq = ed.dept_Seq
		INNER JOIN $DB_NEOS$v_org_chart vo
			ON	ed.dept_seq = vo.dept_seq
		<isEqual property="authCode" compareValue="userAuth">
		WHERE  A.auth_code NOT LIKE 'A%' and e.use_yn != 'D'
		</isEqual>
		<isNotEqual property="authCode" compareValue="userAuth">
		WHERE  A.auth_code = #authCode# and e.use_yn != 'D'
		</isNotEqual>
		<isEqual property="userSe" compareValue="ADMIN">
			AND D.comp_seq = #compSeq#
		</isEqual>	
		
		GROUP BY emp_seq
	</select>
	
	<!-- erp 맵핑된 GW회사 가져오기 -->
	<select id="AccMoneyAuthDAO.AccGWCompSelect" resultClass="hashmap" parameterClass="hashmap">
		SELECT A.comp_seq, C.comp_seq, C.erp_comp_seq, C.erp_comp_name, B.comp_name
		FROM   $DB_NEOS$t_co_comp A
		INNER JOIN $DB_NEOS$t_co_comp_multi B
		ON A.comp_seq = B.comp_seq
		INNER JOIN (
			SELECT *
			FROM   $DB_NEOS$t_co_erp
			WHERE  achr_gbn='ac'
			  AND  erp_type_code = 'iCUBE'
			  
		) C
		ON A.comp_seq = C.comp_seq
	</select>
	
	<!-- 권한 Key 가져오기 -->
	<select id="AccMoneyAuthDAO.AccAuthCodeSelect" resultClass="hashmap" parameterClass="hashmap">
		SELECT CONCAT('A', $DB_NEOS$nextval('accMoneyAuthSeq') ) as accMoneyAuthSeq from dual
	</select>

	<!-- 생성 -->
	<!-- 생성 - 권한 생성  -->
	<insert id="AccMoneyAuthDAO.AuthInfoInsert" parameterClass="hashMap">
<!-- 		<isEqual property="init" compareValue="Y"> -->
<!--         <selectKey keyProperty="accMoneyAuthSeq" resultClass="String"> -->
           
<!--         </selectKey> -->
<!--         </isEqual> -->
        <![CDATA[   
           /* AccMoneyAuthDAO.AuthInfoInsert - mariaDB */ 
           INSERT INTO $DB_NEOS$t_smart_authcode 
           (        
                    auth_code
                  , comp_seq  
                  , use_yn
                  , order_num
                  , etc
                  , create_seq
                  , create_date
           )
           VALUES ( 
                    #accMoneyAuthSeq#
                  , #compSeq#  
                  , #authUseYN#  
                  , #orderNum#
                  , #authEtc#
                  , #empSeq#
                  , NOW() 
           )
        ]]>  
	</insert>
	
	<!-- 생성 - 사용자 지정 권한 -->
	<insert id="AccMoneyAuthDAO.AuthUserInsert" parameterClass="hashMap">
<!--         <selectKey keyProperty="accMoneyAuthSeq" resultClass="String"> -->
<!--            SELECT #authCode# as authCode -->
<!--         </selectKey> -->
        <![CDATA[   
           /* AccMoneyAuthDAO.AuthUserInsert - mariaDB */ 
           INSERT INTO $DB_NEOS$t_smart_authcode 
           (        
                    auth_code
                  , comp_seq  
                  , use_yn
                  , order_num
                  , etc
                  , create_seq
                  , create_date
           )
           VALUES ( 
                    #authCode#
                  , #gwCompSeq#  
                  , 'Y'  
                  , #orderNum#
                  , #authEtc#
                  , #empSeq#
                  , NOW() 
           )
           ON DUPLICATE KEY UPDATE auth_code = #authCode#
        ]]>  
	</insert>	
	
	<!-- 생성 - 권한 생성 멀티  -->
	<insert id="AccMoneyAuthDAO.AuthInfoInsertMulti" parameterClass="hashMap">
        <![CDATA[   
           /* AccMoneyAuthDAO.AuthInfoInsertMulti - mariaDB */ 
           INSERT INTO $DB_NEOS$t_smart_authcode_multi 
           (        
                    auth_code
                  , auth_code_nm  
                  , lang_code
                  , create_seq
                  , create_date
           )
           VALUES ( 
                    #accMoneyAuthSeq#
                  , #authName#  
                  , #langCode#  
                  , #empSeq#
                  , NOW() 
           )
        ]]>  
	</insert>
	
	<!-- 생성 - 사용자 지정 권한 생성 멀티  -->
	<insert id="AccMoneyAuthDAO.AuthUserInsertMulti" parameterClass="hashMap">
        <![CDATA[   
           /* AccMoneyAuthDAO.AuthUserInsertMulti - mariaDB */ 
           INSERT INTO $DB_NEOS$t_smart_authcode_multi 
           (        
                    auth_code
                  , auth_code_nm  
                  , lang_code
                  , create_seq
                  , create_date
           )
           VALUES ( 
                    #authCode#
                  , '사용자 지정권한'  
                  , #langCode#  
                  , #empSeq#
                  , NOW() 
           )
            ON DUPLICATE KEY UPDATE auth_code = #authCode#
        ]]>  
	</insert>
	
	<!-- 생성 - 권한 대상자 생성 -->
	<insert id="AccMoneyAuthDAO.AuthEmpInfoInsert" parameterClass="hashMap">
		/* AccMoneyAuthDAO.AuthEmpInfoInsert - mariaDB */
		INSERT INTO $DB_NEOS$t_smart_authcode_emp
		SET
				  auth_code	= #authCode#
				, emp_seq	= #authEmp#
				, comp_seq	= #authComp#
				, dept_seq	= #authDept#
				, create_seq= #empSeq#
				, create_date=NOW()
		ON DUPLICATE KEY UPDATE 
				auth_code = #authCode#  
				,emp_seq = #authEmp# 
				,comp_seq = #authComp# 
				,dept_seq=#authDept#
				, create_seq= #empSeq#
				, create_date=NOW()
		
	</insert>
	
	<!-- 생성 - 권한 메뉴, ERP 조직도 생성 -->
	<insert id="AccMoneyAuthDAO.AuthMenuDeptInfoInsert" parameterClass="hashMap">
		/* AccMoneyAuthDAO.AuthMenuDeptInfoInsert - mariaDB */
		INSERT INTO $DB_NEOS$t_smart_authcode_menu
		(
				  auth_code
				, menu_code
				, comp_seq
				, emp_seq
				, erp_co_cd
				, erp_co_cd_name
				, erp_biz_cd
				, erp_biz_cd_name
				, create_seq
				, create_date
		)
		VALUES (
				  #authCode#
				, #menuCode#
				, #gwCompSeq#
				, #authEmp#
				, #erpComp#
				, #erpCompName#
				, #erpBiz#
				, #erpBizName#
				, #empSeq#
				, NOW()
		)
	</insert>

	<!-- 수정 -->
	<!-- 수정 - 권한 erp 조직도 수정 -->
	<update id="AccMoneyAuthDAO.AuthMenuDeptInfoAuthUpdate" parameterClass="hashMap">
		UPDATE $DB_NEOS$t_smart_authcode SET
		etc = #authEtc#
		WHERE  auth_code = #authCode#
	</update>
	
	<update id="AccMoneyAuthDAO.AuthMenuDeptInfoAuthMultiUpdate" parameterClass="hashMap">
		UPDATE $DB_NEOS$t_smart_authcode_multi SET
		auth_code_nm = #authName#
		WHERE  auth_code = #authCode#
	</update>
	
	<insert id="AccMoneyAuthDAO.AuthMenuDeptInfoAuthInsert" parameterClass="hashMap">
		<![CDATA[   
           /* AccMoneyAuthDAO.AuthMenuDeptInfoAuthInsert - mariaDB */ 
           INSERT INTO $DB_NEOS$t_smart_authcode 
           (        
                    auth_code
                  , comp_seq  
                  , use_yn
                  , order_num
                  , etc
                  , create_seq
                  , create_date
           )
           VALUES ( 
                    #authCode#
                  , #gwCompSeq#  
                  , 'Y'  
                  , #orderNum#
                  , #authEtc#
                  , #empSeq#
                  , NOW() 
           )
           ON DUPLICATE KEY UPDATE auth_code = #authCode#
        ]]>  
	</insert>
	
	<insert id="AccMoneyAuthDAO.AuthMenuDeptInfoAuthNewMenuInsert" parameterClass="hashMap">
		INSERT INTO $DB_NEOS$t_smart_authcode_menu
		(
				  auth_code
				, menu_code
				, comp_seq
				, emp_seq
				, erp_co_cd
				, erp_co_cd_name
				, erp_biz_cd
				, erp_biz_cd_name
				, create_seq
				, create_date
		)
		VALUES (
				  #authCode#
				, #menuCode#
				, #gwCompSeq#
				, #empSeq#
				, #erpComp#
				, #erpCompName#
				, #erpBiz#
				, #erpBizName#
				, #empSeq#
				, NOW()
		)
	</insert>
	
	<!-- 삭제 -->
	<!-- 삭제 - 권한 대상자 삭제  -->
	<!-- 삭제 - 권한 메뉴, ERP 조직도 삭제  -->
	<delete id="AccMoneyAuthDAO.AuthMenuDeptInfoMenuDelete" parameterClass="hashMap">
		DELETE FROM $DB_NEOS$t_smart_authcode_menu
		WHERE auth_code = #authCode# 
	</delete>
	
	<delete id="AccMoneyAuthDAO.AuthMenuDeptInfoEmpDelete" parameterClass="hashMap">
		DELETE FROM $DB_NEOS$t_smart_authcode_emp
		WHERE auth_code = #authCode#
	</delete>
	
	<delete id="AccMoneyAuthDAO.AuthMenuDeptInfoAuthDelete" parameterClass="hashMap">
		DELETE FROM $DB_NEOS$t_smart_authcode
		WHERE auth_code = #authCode#
	</delete>
	
	<delete id="AccMoneyAuthDAO.AuthMenuDeptInfoAuthMultiDelete" parameterClass="hashMap">
		DELETE FROM $DB_NEOS$t_smart_authcode_multi
		WHERE auth_code = #authCode#
	</delete>

	<delete id="AccMoneyAuthDAO.AuthEmpInfoDelete" parameterClass="hashMap">
		DELETE FROM $DB_NEOS$t_smart_authcode_emp
		WHERE  auth_code = #baseAuthCode# and emp_seq = #authEmp#
	</delete>
    
    <!-- 삭제 - 유저 권한 -->
    <delete id="AccMoneyAuthDAO.AccEmpAuthDelete" parameterClass="hashMap">
    	DELETE FROM $DB_NEOS$t_smart_authcode_emp
    	WHERE  emp_seq = #empSeq#
    </delete>
   
    <!--  삭제 - 사용자지정권한  -->
    <delete id="AccMoneyAuthDAO.AccUserAuthDelete" parameterClass="hashMap">
     	DELETE FROM $DB_NEOS$t_smart_authcode
    	WHERE  auth_code NOT like 'A%' AND auth_code like CONCAT('%_%_', #empSeq#)
    </delete>

    <!--  삭제 - 사용자지정권한 멀티 -->
    <delete id="AccMoneyAuthDAO.AccUserAuthMultiDelete" parameterClass="hashMap">
     	DELETE FROM $DB_NEOS$t_smart_authcode_multi
    	WHERE  auth_code NOT like 'A%' AND auth_code like CONCAT('%_%_', #empSeq#)
    </delete>
    
    <!--  삭제 - 사용자 지정권한 메뉴 -->
    <delete id="AccMoneyAuthDAO.AccUserAuthMenuDelete" parameterClass="hashMap">
     	DELETE FROM $DB_NEOS$t_smart_authcode_menu
    	WHERE  auth_code NOT like 'A%' AND auth_code like CONCAT('%_%_', #empSeq#)
    </delete>
    	
</sqlMap>
