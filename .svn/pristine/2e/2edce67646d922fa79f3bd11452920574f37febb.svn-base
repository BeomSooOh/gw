<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="OrgChart">

	<typeAlias  alias="egovMap" type="egovframework.rte.psl.dataaccess.util.EgovMap"/>

	<select id="OrgChart.selectGroupInfo" parameterClass="hashmap" resultClass="egovMap" >
	/* OrgChart.selectGroupInfo - oracle */
      	SELECT *
		FROM $DB_NEOS$t_co_group A
		WHERE use_yn = 'Y'
		<isNotEmpty property="groupSeq">
		and A.group_seq = #groupSeq#	
		</isNotEmpty>
    </select>
    
    <select id="OrgChart.selectOrgImg" parameterClass="hashmap" resultClass="string">
    /* OrgChart.selectOrgImg - oracle */
    	SELECT file_id
    	FROM $DB_NEOS$t_co_org_img
    	WHERE 	org_seq 				= 			#orgSeq# 
    	  AND	img_type				= 			#imgType# 
    	  AND	os_type					= 			#osType# 
    	  AND	app_type				= 			#appType# 
    	  AND	disp_type				= 			#dispType# 
		<isNotEmpty property="type">
		  AND ph_type  			= 			#type#
		</isNotEmpty>
    </select> 
   
    
    <insert id="OrgChart.insertOrgImg" parameterClass="hashmap">
     /* OrgChart.insertOrgImg - oracle */
	 MERGE INTO $DB_NEOS$t_co_org_img
          USING DUAL
            ON ( org_seq = #orgSeq# AND img_type = #imgType# AND ph_type = NVL(#type#,' ')
            	AND os_type = NVL(#osType#, ' ') AND app_type = NVL(#appType#, ' ') AND disp_type = NVL(#dispType#, ' '))
        WHEN MATCHED THEN
          UPDATE SET 
				file_id 				= 			#fileId#,
				disp_mode				= 			#dispMode#,
				display_text 			= 			#displayText#,
				modify_seq 				= 			#modifySeq#, 
				modify_date				 = 			SYSDATE
         WHEN NOT MATCHED THEN
          INSERT(
            	org_seq,
				img_type,
				file_id,
				ph_type,
				os_type,
				app_type,
				disp_mode,
				disp_type,
				display_text,
				create_seq,
				create_date, 
				modify_seq, 
				modify_date
          )VALUES(
            	#orgSeq#,
				#imgType#,
				#fileId#,
				NVL(#type#, ' '),
				NVL(#osType#, ' '),
				NVL(#appType#, ' '),
				NVL(#dispMode#, ' '),
				NVL(#dispType#, ' '),
				NVL(#displayText#, ' '),
				#createSeq#,
				SYSDATE, 
				#modifySeq#, 
				SYSDATE
          )		
	     </insert>
	     
	     <select id="OrgChart.getOrgImg" parameterClass="hashmap" resultClass="egovMap">
	     /* OrgChart.getOrgImg - oracle */
	     	SELECT 
	     		a.org_seq, a.img_type, a.file_id, c.orignl_file_name, c.file_extsn
			FROM $DB_NEOS$t_co_org_img a, $DB_NEOS$t_co_atch_file b, $DB_NEOS$t_co_atch_file_detail c
			WHERE a.file_id = b.file_id
			AND b.file_id = c.file_id
			AND c.file_sn = '0'
			AND b.use_yn = 'Y'
			AND c.use_yn = 'Y'
			AND a.org_seq = #orgSeq#
				<isNotEmpty property="osType">
					AND
						os_type = #osType#
				</isNotEmpty>
	     </select>
	     
	      <select id="OrgChart.getCompLangList" parameterClass="hashmap" resultClass="egovMap">
	      /* OrgChart.getCompLangList - oracle */
	     	SELECT 	MAX(a.code) KEEP (DENSE_RANK FIRST ORDER BY b.detail_code DESC) as code
	     		  , b.detail_code
	     		  , MAX($DB_NEOS$FN_GetMultiLang(#langCode# , c.detail_name_multi)) KEEP (DENSE_RANK FIRST ORDER BY b.detail_code DESC) as detail_name
	     		  , MAX(d.main_yn) KEEP (DENSE_RANK FIRST ORDER BY b.detail_code DESC) as main_yn 
	     		  , MAX(d.sub_yn) KEEP (DENSE_RANK FIRST ORDER BY b.detail_code DESC) as sub_yn
			FROM 	$DB_NEOS$t_co_code a, 
				$DB_NEOS$t_co_code_detail b 
 LEFT OUTER JOIN (SELECT * FROM $DB_NEOS$t_co_comp_lang WHERE comp_seq = #compSeq#) d 
 			  ON b.detail_code = d.lang_code, $DB_NEOS$v_t_co_code_detail_multi c
			WHERE
				a.code = 'LNG000'
				AND a.code = b.code
				AND b.detail_code = c.detail_code
				<isNotEmpty property="mainYn">
					<isNotEmpty property="subYn">
						AND (d.main_yn = #mainYn# OR d.sub_yn = #subYn#)
					</isNotEmpty>
				</isNotEmpty>
			group by b.detail_code
	     </select>
   
 		<select id="OrgChart.getGroupLangList" parameterClass="hashmap" resultClass="egovMap">
 		/* OrgChart.getGroupLangList - oracle */
			SELECT 
			b.code, 
			b.detail_code, 
			$DB_NEOS$FN_GetMultiLang(#langCode#, la.detail_name_multi) AS detail_name, 
			a.main_yn, 
			a.sub_yn  
			FROM $DB_NEOS$t_co_group_lang a
			JOIN $DB_NEOS$t_co_code_detail b ON b.code = 'LNG000' AND a.lang_code = b.detail_code
			LEFT JOIN $DB_NEOS$v_t_co_code_detail_multi la ON b.code = la.code AND b.detail_code = la.detail_code
			WHERE a.group_seq = #groupSeq#
			ORDER BY (CASE WHEN a.main_yn = 'Y' THEN 0 ELSE 1 END), (CASE WHEN a.sub_yn = 'Y' THEN 0 ELSE 1 END)
	     </select>   
   
   
   		<select id="OrgChart.selectUserPositionList" parameterClass="hashmap" resultClass="egovMap">
   		/* OrgChart.selectUserPositionList - oracle */
   			SELECT DUMMY.*
   			  FROM(
		   			SELECT distinct
		   				a.group_seq, 
		   				<isEqual property="eaType" compareValue="ea">
		   				a.comp_seq as comp_seq,
		   				</isEqual>
		   				<isNotEqual property="eaType" compareValue="ea">
		   				NVL(a.main_comp_seq, a.comp_seq) as comp_seq,
		   				</isNotEqual>
		   				a.emp_seq, 
		   				a.dept_seq,
		   				(a.group_seq || '|' || a.comp_seq || '|' || a.dept_seq) AS seq, 
		   				REPLACE(a.path_name, '|', '-') AS path_name,
		   				DECODE(#deptSeq#,a.dept_seq, 'selected', ' ') as "isSelected",
		   				$DB_NEOS$FN_GetMultiLang(#langCode#, a.comp_name_multi) AS comp_name,
		   				$DB_NEOS$FN_GetMultiLang(#langCode#, a.dept_name_multi) AS dept_name,
		   				a.comp_seq as emp_comp_seq,
		   				'0' eapproval,
		   				'0' eapprovalRef,
		   				(select count(doc_id) From $DB_NEOS$teag_appdoc where user_id = a.emp_seq and doc_sts = '30' and co_id = a.comp_seq) eaprocessingCnt,
		   				d.ea_type,
		   				a.main_dept_yn,
		   				a.main_comp_yn,
		   				d.comp_seq AS dept_comp_seq,
		   				a.emp_lang_code lang_code,
		   				a.biz_seq ,
		   				d.order_num  				
					FROM $DB_NEOS$v_user_info a
					join $DB_NEOS$t_co_emp_dept ed on a.emp_seq = ed.emp_seq and a.dept_seq = ed.dept_seq
					<isNotEmpty property="authCheck">
					LEFT JOIN $DB_NEOS$t_co_auth_relate b on (a.emp_seq = b.emp_seq and a.dept_seq = b.dept_seq and a.comp_seq = b.comp_seq) or (a.comp_seq = b.comp_seq and a.dept_seq = b.dept_seq and b.author_type = '002')
					</isNotEmpty>
					left join $DB_NEOS$t_co_comp d on a.comp_seq = d.comp_seq
					inner join $DB_NEOS$t_co_dept e on a.dept_seq = e.dept_seq			
					WHERE 
						a.emp_seq = #empSeq#
						<isNotEmpty property="deptSeq">
						AND a.dept_seq = #deptSeq#
						</isNotEmpty>
						AND a.use_yn = 'Y'
						AND a.ed_use_yn = 'Y'
						AND d.use_yn = 'Y'
						<isNotEqual property="eaType" compareValue="ea">
						AND ed.ea_display_yn = 'N'
						</isNotEqual>				
						AND e.use_yn = 'Y'		
						<isNotEmpty property="workStatus">
							and a.work_status = #workStatus#
						</isNotEmpty>		
						<isNotEmpty property="eaType">
							<isEqual property="eaType" compareValue="eap">
								AND a.main_dept_yn = 'Y'
							</isEqual>
							<isNotEmpty property="eaUserSe">
								<isEqual property="eaUserSe" compareValue="ADMIN">
								AND a.main_dept_yn = 'Y'
								</isEqual>
							</isNotEmpty>
						</isNotEmpty>
						<isEmpty property="eaType">
							AND a.main_dept_yn = 'Y'
						</isEmpty>				
						<!-- <isNotEmpty property="mainDeptYn">
						AND a.main_dept_yn = #mainDeptYn#
						</isNotEmpty> -->
						<isNotEmpty property="authCheck">
						AND b.author_code is not null
						</isNotEmpty>
					) DUMMY	
				<isNotEmpty property="eaType">
					<isEqual property="eaType" compareValue="ea">
						order by DUMMY.comp_seq
					</isEqual>
				</isNotEmpty>
				<isEmpty property="eaType">
					order by DUMMY.order_num, DUMMY.dept_comp_seq
				</isEmpty>
   		</select>
   		
   		
   		<select id="OrgChart.selectCompBizDeptList" parameterClass="hashmap" resultClass="egovMap">
   		/* OrgChart.selectCompBizDeptList - oracle */
   			SELECT  
			     oc.group_seq as grp_seq
			    ,oc.gbn_org as gbn_org
			    ,oc.comp_seq as comp_seq
			    ,$DB_NEOS$FN_GetMultiLang(#langCode#,ccm.comp_name_multi) as comp_name
			    ,oc.biz_seq as biz_seq
			    ,$DB_NEOS$FN_GetMultiLang(#langCode#,cbm.biz_name_multi) as biz_name
			    ,oc.dept_seq as dept_seq
			    ,$DB_NEOS$FN_GetMultiLang(#langCode#,cdm.dept_name_multi) as dept_name
			    ,oc.parent_seq as parent_seq
			    ,oc."level" as "level"
			    ,oc.order_num as "order"
			    ,oc.path
			    ,(CASE WHEN oc.gbn_org = 'c' AND cb.display_yn = 'Y' THEN (ccm.comp_name || '|' || cbm.biz_name || '|' || cdm.path_name)
			        WHEN cb.display_yn = 'N' THEN (ccm.comp_name || '|' || cdm.path_name) END) as path_name
			    ,a.member as member
			FROM $DB_NEOS$v_org_chart oc
			LEFT JOIN
			(
			    SELECT A.path, NVL(SUM(B.cnt), 0) AS member
			    FROM $DB_NEOS$v_org_chart A
			    LEFT JOIN
			    (
			        SELECT CASE WHEN MAX(cb.display_yn) KEEP (DENSE_RANK FIRST ORDER BY cd.path DESC) = 'Y'
			        			 THEN (max(cb.comp_seq) KEEP (DENSE_RANK FIRST ORDER BY cd.path DESC)
                                                            || '|' 
                                                            || max(cb.biz_seq) KEEP (DENSE_RANK FIRST ORDER BY cd.path DESC)
                                                            || '|' 
                                                            || cd.path)
			            		ELSE (MAX(cb.comp_seq) KEEP (DENSE_RANK FIRST ORDER BY cd.path DESC) || '|' || cd.path)
			            	END as path
			            , COUNT(ed.emp_seq) cnt
			        FROM $DB_NEOS$t_co_dept cd, $DB_NEOS$t_co_emp_dept ed, $DB_NEOS$t_co_biz cb
			        WHERE ed.group_seq = #groupSeq#
			        <isNotEmpty property="compSeqList">
				    AND ed.comp_seq IN ($compSeqList$)
				    </isNotEmpty>
			            AND ed.group_seq = cd.group_seq
			            AND ed.dept_seq = cd.dept_seq
			            AND ed.group_seq = cb.group_seq
			            AND ed.biz_seq = cb.biz_seq
			            AND ed.use_yn = 'Y'
			            AND cd.use_yn = 'Y'
			            AND cb.use_yn = 'Y'
			        GROUP BY cd.path
			    ) B
			    ON B.path like concat(A.path,'%')
			    WHERE A.group_seq =  #groupSeq#
			    <isNotEmpty property="compSeqList">
			    and A.comp_seq IN ($compSeqList$)
			    </isNotEmpty>
			    <isNotEmpty property="compSeq">
				and A.comp_seq = #compSeq#
				</isNotEmpty>
			    GROUP BY A.path  
			) a
			ON oc.path = a.path
			LEFT JOIN $DB_NEOS$t_co_biz cb
			ON      oc.biz_seq = cb.biz_seq AND cb.use_yn = 'Y' 
			LEFT JOIN $DB_NEOS$v_t_co_comp_multi ccm
			ON      oc.comp_seq = ccm.comp_seq AND ccm.use_yn = 'Y'
			LEFT JOIN $DB_NEOS$v_t_co_biz_multi cbm
			ON      oc.biz_seq = cbm.biz_seq AND cbm.use_yn = 'Y'
			LEFT JOIN $DB_NEOS$v_t_co_dept_multi cdm
			ON      oc.dept_seq = cdm.dept_seq AND cdm.use_yn = 'Y'          
			WHERE	oc.group_seq =  #groupSeq#
			<isNotEmpty property="compSeqList">
				and oc.comp_seq IN ($compSeqList$)
			</isNotEmpty>
			<isNotEmpty property="compSeq">
				and oc.comp_seq = #compSeq#
			</isNotEmpty>
			<isNotEmpty property="gbnOrgList">
				and oc.gbn_org IN ($gbnOrgList$)
			</isNotEmpty>
			ORDER BY oc.path
   		</select>
   		
   		<select id="OrgChart.selectCompBizDeptListAdmin" parameterClass="hashmap" resultClass="egovMap">
   		/* OrgChart.selectCompBizDeptListAdmin - oracle */
   			SELECT  
			     oc.group_seq as grp_seq
			    ,oc.gbn_org as gbn_org
			    ,oc.comp_seq as comp_seq
			    ,$DB_NEOS$FN_GetMultiLang(#langCode#,ccm.comp_name_multi) as comp_name
			    ,oc.biz_seq as biz_seq
			    ,$DB_NEOS$FN_GetMultiLang(#langCode#,cbm.biz_name_multi) as biz_name
			    ,oc.dept_seq as dept_seq
			    ,$DB_NEOS$FN_GetMultiLang(#langCode#,cdm.dept_name_multi) as dept_name
			    ,oc.parent_seq as parent_seq
			    ,oc.lvl as "level"
			    ,oc.order_num as "order"
			    ,oc.path
			    ,(CASE WHEN oc.gbn_org = 'c' AND cb.display_yn = 'Y' THEN (ccm.comp_name || '|' || cbm.biz_name || '|' || cdm.path_name)
			        WHEN cb.display_yn = 'N' THEN (ccm.comp_name || '|' || cdm.path_name) END) as path_name
			    ,a.member as member
			    ,cc.comp_cd as "compCd"
			FROM $DB_NEOS$v_org_chart_admin oc
			LEFT JOIN
			(
			    SELECT A.path, NVL(SUM(B.cnt), 0) AS member
			    FROM $DB_NEOS$v_org_chart_admin A
			    LEFT JOIN
			    (
			        SELECT  CASE WHEN MAX(cb.display_yn) KEEP (DENSE_RANK FIRST ORDER BY cd.path DESC) = 'Y'
			        			  THEN (max(cb.comp_seq) KEEP (DENSE_RANK FIRST ORDER BY cd.path DESC)
                                                            || '|' 
                                                            || max(cb.biz_seq) KEEP (DENSE_RANK FIRST ORDER BY cd.path DESC)
                                                            || '|' 
                                                            || cd.path)
			            		ELSE (MAX(cb.comp_seq) KEEP (DENSE_RANK FIRST ORDER BY cd.path DESC) || '|' || cd.path)
			            		END as path	
			            , COUNT(ed.emp_seq) cnt
			        FROM $DB_NEOS$t_co_dept cd, $DB_NEOS$t_co_emp_dept ed, $DB_NEOS$t_co_biz cb
			        WHERE ed.group_seq = #groupSeq#
			        <isNotEmpty property="compSeqList">
				    AND ed.comp_seq IN ($compSeqList$)
				    </isNotEmpty>
			            AND ed.group_seq = cd.group_seq
			            AND ed.dept_seq = cd.dept_seq
			            AND ed.group_seq = cb.group_seq
			            AND ed.biz_seq = cb.biz_seq
			            AND ed.use_yn = 'Y'
			            AND cd.use_yn = 'Y'
			            AND cb.use_yn = 'Y'
			        GROUP BY cd.path
			    ) B
			    ON B.path like concat(A.path,'%')
			    WHERE A.group_seq =  #groupSeq#
			    <isNotEmpty property="compSeqList">
			    and A.comp_seq IN ($compSeqList$)
			    </isNotEmpty>
			    <isNotEmpty property="compSeq">
				and A.comp_seq = #compSeq#
				</isNotEmpty>
			    GROUP BY A.path  
			) a
			ON oc.path = a.path
			LEFT JOIN $DB_NEOS$t_co_comp cc
			ON      oc.comp_seq= cc.comp_seq
			LEFT JOIN $DB_NEOS$t_co_biz cb
			ON      oc.biz_seq = cb.biz_seq
			LEFT JOIN $DB_NEOS$v_t_co_comp_multi ccm
			ON      oc.comp_seq = ccm.comp_seq
			LEFT JOIN $DB_NEOS$v_t_co_biz_multi cbm
			ON      oc.biz_seq = cbm.biz_seq
			LEFT JOIN $DB_NEOS$v_t_co_dept_multi cdm
			ON      oc.dept_seq = cdm.dept_seq          
			WHERE	oc.group_seq =  #groupSeq#
			<isNotEmpty property="compSeqList">
				and oc.comp_seq IN ($compSeqList$)
			</isNotEmpty>
			<isNotEmpty property="compSeq">
				and oc.comp_seq = #compSeq#
			</isNotEmpty>
			<isNotEmpty property="gbnOrgList">
				and oc.gbn_org IN ($gbnOrgList$)
			</isNotEmpty>
			<isNotEmpty property="gubun">
				and oc.use_yn = 'Y'
				<isEqual property="gubun" compareValue="grouping">
				and oc.comp_seq IN (select comp_seq from $DB_NEOS$t_co_groupping_comp where groupping_seq = #grouppingSeq#)
				</isEqual>
				<isEqual property="gubun" compareValue="notGrouping">
				and oc.comp_seq NOT IN (select comp_seq from $DB_NEOS$t_co_groupping_comp where groupping_seq = #grouppingSeq#)
				</isEqual>
			</isNotEmpty>
			
			ORDER BY NVL(oc.order_num, -1), oc.comp_seq
   		</select>
   		
   		<select id="OrgChart.getDeptSelectedList" parameterClass="hashmap" resultClass="egovMap">
   		/* OrgChart.getDeptSelectedList - oracle */
   			SELECT a.dept_seq AS seq
   				 , (SELECT $DB_NEOS$FN_GetMultiLang(#langCode#,comp_name_multi) 
   				 	  FROM $DB_NEOS$v_t_co_comp_multi 
   				 	 WHERE comp_seq = a.comp_seq 
   				 	   AND use_yn = 'Y' 
   				 	   AND ROWNUM = 1) AS "seqName"
   				 , ' ' AS emp_seq
   				 , a.dept_seq
   				 , a.comp_seq
   				 , $DB_NEOS$FN_GetMultiLang(#langCode#,b.dept_name_multi) as dept_name
   				 , ' ' AS duty_name
   				 , 'd' AS gbn
   				 , a.group_seq
   				 , a.comp_seq
   				 , a.biz_seq
			FROM $DB_NEOS$t_co_dept a, $DB_NEOS$v_t_co_dept_multi b
			WHERE
				a.dept_seq = b.dept_seq
				AND a.group_seq = #groupSeq#
				AND a.comp_seq = #compSeq#
				AND a.use_yn = 'Y'
				AND a.use_yn = b.use_yn
			<isNotEmpty property="selectedDeptList">
				<iterate  prepend="AND" property="selectedDeptList" open=" a.dept_seq IN (" close=")" conjunction="," >
					#selectedDeptList[].deptSeq#
				</iterate>
			</isNotEmpty>
   		</select>
   		
   		<select id="OrgChart.getEmpSelectedList" parameterClass="hashmap" resultClass="egovMap">
   		/* OrgChart.getEmpSelectedList - oracle */
			SELECT a.emp_seq AS seq, 
			(SELECT $DB_NEOS$FN_GetMultiLang(#langCode#, emp_name_multi) FROM $DB_NEOS$v_t_co_emp_multi WHERE emp_seq = a.emp_seq AND use_yn = 'Y' AND ROWNUM = 1) AS "seqName",
			a.emp_seq, a.dept_seq, a.comp_seq, (SELECT $DB_NEOS$FN_GetMultiLang(#langCode#,dept_name_multi) FROM $DB_NEOS$v_t_co_dept_multi WHERE dept_seq = a.dept_seq AND a.use_yn = 'Y' AND ROWNUM = 1) AS dept_name, 
				$DB_NEOS$get_emp_duty_position_name(a.group_seq, a.comp_seq, a.duty_code, 'DUTY', #langCode#) AS duty_name,
				'm' AS gbn, a.group_seq, a.comp_seq, a.biz_seq
			FROM $DB_NEOS$t_co_emp_dept a, $DB_NEOS$v_t_co_emp_dept_multi b
			WHERE a.emp_seq = b.emp_seq 
				AND a.dept_seq = b.dept_seq 
				AND a.group_seq = #groupSeq#
				<isNotEmpty property="compSeq">
				AND a.comp_seq = #compSeq#
				</isNotEmpty>
				AND a.use_yn = 'Y'
				AND a.use_yn = b.use_yn
			<isNotEmpty property="selectedEmpList">
				<iterate  prepend="AND" property="selectedEmpList" open=" CONCAT(a.emp_seq, a.dept_seq) IN (" close=")" conjunction="," >
					<isEmpty property="selectedEmpList[].empSeq">
						concat(#selectedEmpList[].seq#, #selectedEmpList[].deptSeq#)
					</isEmpty>
					<isNotEmpty property="selectedEmpList[].empSeq">
						concat(#selectedEmpList[].empSeq#, #selectedEmpList[].deptSeq#)
					</isNotEmpty>
				</iterate>
			</isNotEmpty>
				
   		</select>
   		
   		<select id="OrgChart.getAddrGroupList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
<!-- 			SELECT * FROM -->
<!-- 			( -->
<!-- 				SELECT  -->
<!-- 					'folder' as folder -->
<!-- 					,addr_group_seq as group_seq -->
<!-- 					,case when addr_group_tp = 10 then '회사' when addr_group_tp = 20 then '부서' when addr_group_tp = 30 then '개인' end as addr_group_tp_nm -->
<!-- 					,addr_group_tp -->
<!-- 					,addr_group_nm as group_nm -->
<!-- 					,(select emp_name from v_user_info b -->
<!-- 						where a.create_seq = b.emp_seq and b.emp_lang_code=#langCode# -->
<!-- 						limit 0,1			 -->
<!-- 						) as create_nm -->
<!-- 					,addr_group_desc -->
<!-- 					,create_seq -->
<!-- 					,use_yn -->
<!-- 					,(select if(count(*)>0,count(*),0) -->
<!-- 							from t_tmpg_addr B  -->
<!-- 							where B.addr_group_seq = a.addr_group_seq) cntAddr -->
<!-- 					<isEmpty property="adminAuth"> -->
<!-- 						,( -->
<!-- 						 	select if(count(*)>0, 'D', '') -->
<!-- 						 	from t_tmpg_addrpublic B -->
<!-- 						 	where ( -->
<!-- 						 			(B.org_seq = #deptSeq# and B.org_div = 'd') or -->
<!-- 						 			(B.org_seq = #compSeq# and B.org_div = 'c') -->
<!-- 						 	      ) and a.addr_group_seq = B.addr_seq -->
<!-- 				 	      ) authDept -->
<!-- 						 ,( -->
<!-- 						 	select if(count(*)>0,'M','') -->
<!-- 						 	from t_tmpg_addrpublic C -->
<!-- 						 	where ( -->
<!-- 						 	 	  	(a.create_seq = #empSeq#) -->
<!-- 						 	 	  ) and a.addr_group_seq = C.addr_seq) authMy -->
<!-- 			 	 	  </isEmpty> -->
<!-- 			 	 	  <isNotEmpty property="adminAuth"> -->
<!-- 			 	 	  	,'D' authDept -->
<!-- 			 	 	  	,'M' authMy -->
<!-- 			 	 	  </isNotEmpty> -->
<!-- 				from t_tmpg_addrgroup a -->
<!-- 				WHERE addr_group_nm LIKE '%$txtSearchGroupNm$%' -->
<!-- 			) T -->
<!-- 			<isEmpty property="adminAuth"> -->
<!-- 				where authDept != '' or authMy != '' -->
<!-- 			</isEmpty> -->
<!-- 			SELECT  -->
<!-- 			'folder' as folder -->
<!-- 			,addr_group_seq as group_seq -->
<!-- 			,case when addr_group_tp = 10 then '회사' when addr_group_tp = 20 then '부서' when addr_group_tp = 30 then '개인' end as addr_group_tp_nm -->
<!-- 			,addr_group_tp -->
<!-- 			,addr_group_nm as group_nm -->
<!-- 			,(select emp_name from v_user_info b -->
<!-- 				where a.create_seq = b.emp_seq and b.emp_lang_code=#langCode# -->
<!-- 				limit 0,1			 -->
<!-- 				) as create_nm -->
<!-- 			,addr_group_desc -->
<!-- 			,create_seq -->
<!-- 			,use_yn -->
<!-- 			,(select if(count(*)>0,count(*),0) -->
<!-- 					from t_tmpg_addr B  -->
<!-- 					where B.addr_group_seq = a.addr_group_seq) cntAddr -->
<!-- 		from t_tmpg_addrgroup a -->
<!-- 		WHERE NVL(addr_group_nm,'') LIKE '%$txtSearchGroupNm$%' -->
		
		
		SELECT Distinct 
			'folder' as folder
			,a.addr_group_seq as group_seq
			,$DB_NEOS$get_code_detail_info('0', 'mp0007',  a.addr_group_tp, #langCode#) as addr_group_tp_nm
			,a.addr_group_tp
			,a.addr_group_nm as group_nm
			,$DB_NEOS$FN_GetMultiLang(#langCode#, user.emp_name_multi) as create_nm 	
			,a.addr_group_desc
			,a.create_seq
			,a.use_yn
			,(select if(count(*)>0,count(*),0)
					from $DB_NEOS$t_tmpg_addr B 
					where B.addr_group_seq = a.addr_group_seq) cntAddr
		from $DB_NEOS$t_tmpg_addrgroup a
		join $DB_NEOS$v_t_co_emp_multi user on a.create_seq = user.emp_seq
		left outer join $DB_NEOS$t_tmpg_addr B on A.addr_group_seq = B.addr_group_seq
		left outer join $DB_NEOS$t_tmpg_addrpublic C on a.addr_group_seq = c.addr_group_seq
		WHERE NVL(addr_group_nm,'') LIKE '%$txtSearchGroupNm$%'
		AND (case when a.addr_group_tp = 30 then A.create_seq = #empSeq# or B.create_seq = #empSeq# 
		when a.addr_group_tp = 10 then B.comp_seq = #compSeq#
		when (a.addr_group_tp = 20 or a.addr_group_tp = 50)  then C.org_seq = #deptSeq# end)
		
		
		
   		</select>
   		
   		<select id="OrgChart.getAddrList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
   			SELECT
			addr_seq
			,a.addr_group_seq
			,comp_nm
   			,emp_nm
   			,comp_fax
   			,comp_tel as comp_tel
   			,emp_email as e_mail
		FROM $DB_NEOS$t_tmpg_addr A
		INNER JOIN $DB_NEOS$t_tmpg_addrGroup B on A.addr_group_seq = B.addr_group_seq
		left join (select distinct addr_group_seq
						from $DB_NEOS$t_tmpg_addrpublic
						where case when org_div = 'c' then org_seq = #compSeq#
									  when org_div = 'd' then org_seq = #deptSeq#
									  when org_div = 'm' then org_seq = #empSeq# end
					 ) C on C.addr_group_seq = B.addr_group_seq and B.addr_group_tp = '20'
		WHERE 1 = 1
			<isNotEqual property="adminAuth" compareValue="ADMIN">
				AND (A.create_seq = #empSeq# or (A.comp_seq = #compSeq# and A.addr_div = 10) or C.addr_group_seq is not null)
			</isNotEqual>
	   		<isNotEmpty property="groupSeq">
	   			AND A.addr_group_seq = #groupSeq#
	   		</isNotEmpty>
	   		<isNotEmpty property="searchDiv">
	   			<isEqual property="searchDiv" compareValue="all">
		        	<isNotEmpty property="txtSearch">
		        		AND (NVL(emp_nm,'') LIKE '%$txtSearch$%' or NVL(comp_nm,'') LIKE '%$txtSearch$%' or NVL(emp_email,'') LIKE '%$txtSearch$%') 
		        	</isNotEmpty>
		        </isEqual>
		        <isEqual property="searchDiv" compareValue="이름">
		        	<isNotEmpty property="txtSearch">
		        		AND NVL(emp_nm,'') LIKE '%$txtSearch$%'
		        	</isNotEmpty>
		        </isEqual>
		        <isEqual property="searchDiv" compareValue="회사">
		        	<isNotEmpty property="txtSearch">
		        		AND NVL(comp_nm,'') LIKE '%$txtSearch$%'
		        	</isNotEmpty>
		        </isEqual>
		        <isEqual property="searchDiv" compareValue="팩스번호">
		        	<isNotEmpty property="txtSearch">
		        		AND NVL(emp_email,'') LIKE '%$txtSearch$%'
		        	</isNotEmpty>
		        </isEqual>
	   		</isNotEmpty>
   			
<!--    			SELECT -->
<!--    				addr_seq, -->
<!--    				addr_group_seq, -->
<!--    				comp_nm, -->
<!--    				emp_nm, -->
<!--    				comp_fax, -->
<!--    				comp_tel as comp_tel, -->
<!--    				emp_email as e_mail -->
<!--   			FROM t_tmpg_addr -->
<!--   			WHERE 1=1 -->
<!--   			<isNotEmpty property="groupSeq"> -->
<!-- 				and addr_group_seq = #groupSeq# -->
<!-- 			</isNotEmpty>  -->
<!-- 			<isEqual property="searchDiv" compareValue="이름"> -->
<!-- 	        	<isNotEmpty property="txtSearchKeyword"> -->
<!-- 	        		AND (NVL(emp_nm,'')) LIKE '%$txtSearchKeyword$%'  -->
<!-- 	        	</isNotEmpty> -->
<!-- 	        </isEqual> -->
<!-- 	        <isEqual property="searchDiv" compareValue="회사"> -->
<!-- 	        	<isNotEmpty property="txtSearchKeyword"> -->
<!-- 	        		AND (NVL(comp_nm,'')) LIKE '%$txtSearchKeyword$%'  -->
<!-- 	        	</isNotEmpty> -->
<!-- 	        </isEqual> -->
<!-- 	        <isEqual property="searchDiv" compareValue="팩스번호"> -->
<!-- 	        	<isNotEmpty property="txtSearchKeyword"> -->
<!-- 	        		AND (NVL(comp_fax,'')) LIKE '%$txtSearchKeyword$%'  -->
<!-- 	        	</isNotEmpty> -->
<!-- 	        </isEqual> -->
  			
   				
   				
   		</select>
   		
   		
   		<select id="OrgChart.getEmpList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
   		/* OrgChart.getEmpList - oracle */
   		SELECT 
   				order_text as "order_text", out_mail as "out_mail", out_domain as "out_domain", standard_code as "standard_code",
				sign_type as "sign_type", ea_display_yn as "ea_display_yn", main_comp_yn as "main_comp_yn", group_seq as "group_seq",
				comp_seq as "comp_seq", dept_seq as "dept_seq", biz_seq as "biz_seq", biz_name_multi as "biz_name_multi",
				emp_seq as "emp_seq", comp_name as "comp_name", comp_name_multi as "comp_name_multi", login_id as "login_id",
				emp_num as "emp_num", erp_emp_num as "erp_emp_num", email_addr as "email_addr", license_check_yn as "license_check_yn",
				homepg_addr as "homepg_addr", comp_display_name as "comp_display_name", emp_name as "emp_name", emp_name_multi as "emp_name_multi",
				login_passwd as	"login_passwd", pay_passwd as "pay_passwd", appr_passwd as "appr_passwd", gender_code as "gender_code",
				main_work as "main_work", duty_code as "duty_code", position_code as "position_code", mobile_tel_num as "mobile_tel_num",
				fax_num as "fax_num", home_tel_num as "home_tel_num", tel_num as "tel_num", zip_code as "zip_code", 
				addr as "addr", detail_addr as "detail_addr", dept_zip_code as "dept_zip_code", dept_addr as "dept_addr",
				dept_detail_addr as "dept_detail_addr", bday as "bday",	lunar_yn as "lunar_yn",	wedding_yn as "wedding_yn",
				wedding_day  as "wedding_day",	private_yn as "private_yn", work_status as "work_status", job_code as "job_code",
				status_code as "status_code", join_day as "join_day", resign_day as "resign_day", emp_lang_code as "emp_lang_code",
				dept_lang_code as "dept_lang_code", comp_lang_code as "comp_lang_code", main_dept_yn as "main_dept_yn", dept_name as "dept_name",
				dept_name_multi as "dept_name_multi", orgchart_display_yn as "orgchart_display_yn", messenger_display_yn as "messenger_display_yn", mobile_use_yn as "mobile_use_yn",
				messenger_use_yn  as "messenger_use_yn", check_work_yn as "check_work_yn", shift as "shift", native_lang_code as "native_lang_code",
				pic_file_id as "pic_file_id", sign_file_id as "sign_file_id", ls_role_id as "ls_role_id", dept_duty_code as "dept_duty_code",
				dept_position_code as "dept_position_code", email_domain as "email_domain", create_date as "create_date", path_name as "path_name",
				use_yn as "use_yn", e_use_yn as "e_use_yn", ed_use_yn as "ed_use_yn", emd_use_yn as "emd_use_yn",
				cm_use_yn as "cm_use_yn", dm_use_yn as "dm_use_yn"
  		FROM $DB_NEOS$v_user_info
		WHERE 1 = 1
		and work_status='999' and orgchart_display_yn = 'Y' and use_yn = 'Y' and ea_display_yn = 'N'
		<isNotEmpty property="seqList">
				and dept_seq IN($seqList$)
		</isNotEmpty> 
		<isNotEmpty property="txtEmpNm">
				and (emp_name LIKE '%$txtEmpNm$%' or login_id LIKE '%$txtEmpNm$%')
		</isNotEmpty>
   		</select>
   		
   		<select id="OrgChart.getMyPath" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
   		
			<isNotEmpty property="gbnOrg">
				<isEqual property="gbnOrg" compareValue="c">
				select #seq# as "path" from dual
				</isEqual>
				<isEqual property="gbnOrg" compareValue="b">
				select comp_seq || '|' || biz_seq as "path"
				from $DB_NEOS$t_co_biz where biz_seq = #seq#
				</isEqual>				
				<isEqual property="gbnOrg" compareValue="d">
				select
				case when b.display_yn = 'Y' then d.comp_seq || '|' || d.biz_seq || '|' || d.path else d.comp_seq || '|' || d.path end as "path"
				from $DB_NEOS$t_co_dept d
				join $DB_NEOS$t_co_biz b on d.biz_seq = b.biz_seq
				where d.dept_seq = #seq#
				</isEqual>
			</isNotEmpty>
			<isEmpty property="gbnOrg">
				select
				case when b.display_yn = 'Y' then d.comp_seq || '|' || d.biz_seq || '|' || d.path else d.comp_seq || '|' || d.path end as "path"
				from $DB_NEOS$t_co_dept d
				join $DB_NEOS$t_co_biz b on d.biz_seq = b.biz_seq
				where d.dept_seq = #deptSeq#		
			</isEmpty>
		
		</select>
		
		<select id="OrgChart.getMyPathAdmin" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
		
			<isNotEmpty property="gbnOrg">
				<isEqual property="gbnOrg" compareValue="c">
				select #seq# as "path" from dual
				</isEqual>
				<isEqual property="gbnOrg" compareValue="b">
				select comp_seq || '|' || biz_seq as "path"
				from $DB_NEOS$t_co_biz where biz_seq = #seq#
				</isEqual>				
				<isEqual property="gbnOrg" compareValue="d">
				select
				case when b.display_yn = 'Y' then d.comp_seq || '|' || d.biz_seq || '|' || d.path else d.comp_seq || '|' || d.path end as "path"
				from $DB_NEOS$t_co_dept d
				join $DB_NEOS$t_co_biz b on d.biz_seq = b.biz_seq
				where d.dept_seq = #seq#
				</isEqual>
			</isNotEmpty>
			<isEmpty property="gbnOrg">
				select
				case when b.display_yn = 'Y' then d.comp_seq || '|' || d.biz_seq || '|' || d.path else d.comp_seq || '|' || d.path end as "path"
				from $DB_NEOS$t_co_dept d
				join $DB_NEOS$t_co_biz b on d.biz_seq = b.biz_seq
				where d.dept_seq = #deptSeq#		
			</isEmpty>	
		
		</select>
   		
   		<select id="OrgChart.getCompBizDeptList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
   		SELECT A.group_seq AS "grp_seq",
		       A.gbn_org AS "gbn_org",
		       A.seq AS "id",
		       A.comp_seq AS "comp_seq",
		       $DB_NEOS$FN_GetMultiLang(#langCode#,B.comp_name_multi) AS "comp_name",
		       A.biz_seq AS "biz_seq",
		       $DB_NEOS$FN_GetMultiLang(#langCode#,C.biz_name_multi) AS "biz_name",
		       A.dept_seq AS "dept_seq",
		       $DB_NEOS$FN_GetMultiLang(#langCode#,D.dept_name_multi) AS "dept_name",
		       A.parent_seq AS "parent",
		       A."level" AS "level",
		       A.order_num AS "order",
		       A.path AS "path",
		       CASE WHEN gbn_org = 'c' THEN $DB_NEOS$FN_GetMultiLang(#langCode#,B.comp_name_multi)
		       WHEN gbn_org = 'b' THEN $DB_NEOS$FN_GetMultiLang(#langCode#,C.biz_name_multi)
		       ELSE $DB_NEOS$FN_GetMultiLang(#langCode#,D.dept_name_multi) END AS "text",
		       (SELECT COUNT(*)
		        FROM $DB_NEOS$v_org_chart E
				WHERE A.group_seq = E.group_seq
				AND A.seq = E.parent_seq) AS "children_cnt"
		FROM $DB_NEOS$v_org_chart A
		LEFT OUTER JOIN $DB_NEOS$v_t_co_comp_multi B
		ON A.gbn_org = 'c' 
		AND A.comp_seq = B.comp_seq 
		AND B.use_yn = 'Y'
		LEFT OUTER JOIN $DB_NEOS$v_t_co_biz_multi C
		ON A.gbn_org = 'b' 
		AND A.biz_seq = C.biz_seq 
		AND C.use_yn = 'Y'
		LEFT OUTER JOIN $DB_NEOS$v_t_co_dept_multi D
		ON A.gbn_org = 'd' 
		AND A.dept_seq = D.dept_seq 
		AND D.use_yn = 'Y'
		WHERE A.group_seq = #groupSeq#
		AND A.parent_seq = #parentSeq#
		<isNotEmpty property="compSeq">
		AND A.comp_seq = #compSeq#
		</isNotEmpty>
		ORDER BY A.order_num   		
   		</select>
   		
   		<select id="OrgChart.getCompBizDeptListAdmin" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
   		/* OrgChart.getCompBizDeptListAdmin - Oracle(관리자용 부서리스트) */
   		<!-- 사용유무와 상관없이 조회 -->
   		SELECT A.group_seq AS "grp_seq",
		       A.gbn_org AS "gbn_org",
		       A.seq AS "id",
		       A.comp_seq AS "comp_seq",
		       $DB_NEOS$FN_GetMultiLang(#langCode#,B.comp_name_multi) AS "comp_name",
		       A.biz_seq AS "biz_seq",
		       $DB_NEOS$FN_GetMultiLang(#langCode#,C.biz_name_multi) AS "biz_name",
		       A.dept_seq AS "dept_seq",
		       $DB_NEOS$FN_GetMultiLang(#langCode#,D.dept_name_multi) AS "dept_name",
		       A.parent_seq AS "parent",
		       A.lvl AS "level",
		       A.order_num AS "order",
		       A.path AS "path",
		       CASE WHEN gbn_org = 'c' THEN $DB_NEOS$FN_GetMultiLang(#langCode#,B.comp_name_multi)
		       WHEN gbn_org = 'b' THEN $DB_NEOS$FN_GetMultiLang(#langCode#,C.biz_name_multi)
		       ELSE $DB_NEOS$FN_GetMultiLang(#langCode#,D.dept_name_multi) END AS "text",
		       (SELECT COUNT(*)
		        FROM $DB_NEOS$v_org_chart_admin E
				WHERE A.group_seq = E.group_seq
				AND A.seq = E.parent_seq) AS "children_cnt"
		FROM $DB_NEOS$v_org_chart_admin A
		LEFT OUTER JOIN $DB_NEOS$v_t_co_comp_multi B
		ON A.gbn_org = 'c' 
		AND A.comp_seq = B.comp_seq 
		AND B.use_yn = 'Y'
		LEFT OUTER JOIN $DB_NEOS$v_t_co_biz_multi C
		ON A.gbn_org = 'b' 
		AND A.biz_seq = C.biz_seq 
		<!-- AND C.use_yn = 'Y' -->
		LEFT OUTER JOIN $DB_NEOS$v_t_co_dept_multi D
		ON A.gbn_org = 'd' 
		AND A.dept_seq = D.dept_seq 
		<!-- AND D.use_yn = 'Y' -->
		WHERE A.group_seq = #groupSeq#
		AND A.parent_seq = #parentSeq#
		<isEqual property="parentSeq" compareValue="0" >
			AND (A.gbn_org = 'c' AND A.use_yn = 'Y') <!-- 회사조회시 useYn = Y , 부서조회시 useYn = All -->
		</isEqual>
		<isNotEmpty property="compSeq">
		AND A.comp_seq = #compSeq#
		</isNotEmpty>
		ORDER BY A.order_num   		
   		</select>
   		
   		<select id="OrgChart.getCompBizDeptListForAdmin" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
   		/* OrgChart.getCompBizDeptListForAdmin - Oracle(관리자용 부서리스트) */
   		<!-- 사용유무와 상관없이 조회 -->
   		SELECT A.group_seq AS "grp_seq",
		       A.gbn_org AS "gbn_org",
		       A.seq AS "id",
		       A.comp_seq AS "comp_seq",
		       $DB_NEOS$FN_GetMultiLang(#langCode#,B.comp_name_multi) AS "comp_name",
		       A.biz_seq AS "biz_seq",
		       $DB_NEOS$FN_GetMultiLang(#langCode#,C.biz_name_multi) AS "biz_name",
		       A.dept_seq AS "dept_seq",
		       $DB_NEOS$FN_GetMultiLang(#langCode#,D.dept_name_multi) AS "dept_name",
		       NVL(A.team_yn, ' ') AS "team_yn",
		       A.parent_seq AS "parent",
		       A."LEVEL" AS "level",
		       A.order_num AS "order",
		       A.path AS "path",
		       CASE WHEN gbn_org = 'c' THEN $DB_NEOS$FN_GetMultiLang(#langCode#,B.comp_name_multi)
		       WHEN gbn_org = 'b' THEN $DB_NEOS$FN_GetMultiLang(#langCode#,C.biz_name_multi)
		       ELSE $DB_NEOS$FN_GetMultiLang(#langCode#,D.dept_name_multi) END AS "text",
		       (SELECT COUNT(*)
		        FROM $DB_NEOS$v_org_chart_admin E
				WHERE A.group_seq = E.group_seq
				AND A.seq = E.parent_seq) AS "children_cnt"
		FROM $DB_NEOS$v_org_chart_admin_temp A
		LEFT OUTER JOIN $DB_NEOS$v_t_co_comp_multi B
		ON A.gbn_org = 'c' 
		AND A.comp_seq = B.comp_seq 
		AND B.use_yn = 'Y'
		LEFT OUTER JOIN $DB_NEOS$v_t_co_biz_multi C
		ON A.gbn_org = 'b' 
		AND A.biz_seq = C.biz_seq 
		<!-- AND C.use_yn = 'Y' -->
		LEFT OUTER JOIN $DB_NEOS$v_t_co_dept_multi D
		ON A.gbn_org = 'd' 
		AND A.dept_seq = D.dept_seq 
		<!-- AND D.use_yn = 'Y' -->
		WHERE A.group_seq = #groupSeq#
		AND A.parent_seq = #parentSeq#
		<isEqual property="parentSeq" compareValue="0" >
			AND (A.gbn_org = 'c' AND A.use_yn = 'Y') <!-- 회사조회시 useYn = Y , 부서조회시 useYn = All -->
		</isEqual>
		<isNotEmpty property="compSeq">
			AND A.comp_seq = #compSeq#
		</isNotEmpty>
		ORDER BY CASE WHEN A.order_num IS NULL then -1 ELSE A.order_num END	
   		</select>
   		
   		<select id="OrgChart.getBizListForAdmin" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
   		/* OrgChart.getBizListForAdmin - Oracle(관리자용 사업장리스트) */
   		<!-- 사용유무와 상관없이 조회 -->
   		SELECT 'b' AS "gbn_org",
		       concat('_', A.biz_seq) AS "id",
		       A.group_seq AS "grp_seq",
		       A.comp_seq AS "comp_seq",
		       ' ' AS "comp_name",
		       A.biz_seq AS "biz_seq",
		       $DB_NEOS$FN_GetMultiLang(#langCode#,B.biz_name_multi) AS "biz_name",
		       '0' AS "dept_seq",
		       ' ' AS "dept_name",
		       ' ' AS "team_yn",
		       A.comp_seq AS "parent",
		       A.order_num AS "order",
		       ' ' AS "path",
		       B.biz_name AS "text",
		       (SELECT COUNT(*)
		        FROM $DB_NEOS$v_org_chart_admin E
				WHERE E.group_seq = A.group_seq
				AND E.comp_seq = A.comp_seq 
				AND E.biz_seq = A.biz_seq) AS "children_cnt"
		 FROM $DB_NEOS$t_co_biz A, $DB_NEOS$v_t_co_biz_multi B
		WHERE A.group_seq = #groupSeq#
		  AND A.comp_seq = #parentSeq#
		  AND A.biz_seq = B.biz_seq
		  <isEqual property="useYn" compareValue="Y" >
		  AND A.use_yn = 'Y'
		  </isEqual>	 
		ORDER BY A.order_num   		
   		</select>
   
   
		<!-- 공통 조직도 v 5.0 시작 -->
    	<select id="OrgChart.selectUserProfileList" parameterClass="hashmap" resultClass="egovMap">
			/* sqlmap/mysql/neos/cmm/systemx/OrgChart_SQL.xml - OrgChart.selectUserProfileList   */
			/* 부서 소속 사용자 리스트 검색 */
			SELECT	group_seq	AS  "groupSeq"
				, comp_seq		AS	"compSeq"
				, dept_seq		AS  "deptSeq"
				, emp_seq		AS  "empSeq"
				, ''			AS	"parentDeptSeq"
				, '(' || login_id || ')'	AS "empNameAdv"
				
				, comp_name		AS  "compName"
				, dept_name		AS  "deptName"
				, emp_name		AS  "empName"
				
				, ''			AS 	"pathName"
				, ''			AS	"deptPath"
				
				, (get_emp_duty_position_name(group_seq,comp_seq, dept_duty_code, 'DUTY', native_lang_code))			AS "dutyName"
				, (get_emp_duty_position_name(group_seq,comp_seq, dept_position_code, 'POSITION', native_lang_code))	AS "positionName"
				, dept_duty_code 		AS	"dutyCode"
				, dept_position_code 	AS	"positionCode"
				
				, 'u'			AS 	"empDeptFlag"
				, group_seq || '|' || comp_seq || '|' || dept_seq || '|' || emp_seq || '|u'	  AS  "superKey"
			FROM	v_user_info
			WHERE	group_seq 	= #groupSeq#
			<isNotEmpty property="targetDeptSeq">
				AND		dept_Seq = #targetDeptSeq#			
			</isNotEmpty>
			AND	dept_seq 		= #selectedId#
			AND	orgchart_display_yn = 'Y'
			AND use_yn = 'Y'
			AND work_status = '999'
   		</select>
   		
   		<select id="OrgChart.selectDeptProfileList" parameterClass="hashmap" resultClass="java.util.HashMap">
			/* sqlmap/mysql/neos/cmm/systemx/OrgChart_SQL.xml - OrgChart.selectDeptProfileList   */
			/* 하위 부서 리스트 검색 */
			SELECT	 A.group_seq 	AS 	"groupSeq"
				, A.comp_seq 		AS 	"compSeq"
				, A.dept_seq 		AS	"deptSeq"
				, '' 				AS 	"empSeq"
				, parent_dept_seq	AS 	"parentDeptSeq"
				, fn_getmultilang(#langCode#,C.comp_name)			AS 	"compName"	
				, fn_getmultilang(#langCode#,B.dept_name_multi) AS	"deptName"		
				, ''				AS	"empName"
				, GET_DEPT_PATHNM('|', A.dept_seq, A.group_seq, #langCode#) AS	"pathName"			
				, path	AS		"deptPath"
				, ''	AS 		"dutyName"
				, ''	AS 		"positionName"
				, ''	AS		"dutyCode"
				, ''	AS		"positionCode"
				, gbn_org AS 	"empDeptFlag"
				, A.group_seq || '|' || A.comp_seq || '|' || A.dept_seq || '|' || '0|' || gbn_org AS	"superKey"
			FROM	(
		        SELECT 	(CASE WHEN TO_CHAR(gbn_org) = 'c' THEN '0' ELSE seq END ) AS dept_seq
		          , group_seq	AS	group_seq
		          , comp_seq	AS	comp_seq
		          , biz_seq		AS	biz_seq
		          , parent_seq 	AS 	parent_dept_seq
		          , path		AS	path
		          , gbn_org		AS	gbn_org
		        FROM 	v_org_chart
		        WHERE 	group_seq	= #groupSeq#  
		        AND 	(( CASE WHEN parent_seq = '0' THEN TO_CHAR(comp_seq) ELSE TO_CHAR(parent_seq) END ) = #selectedId# OR seq = #selectedId#) 
			)	A
				LEFT JOIN v_t_co_dept_multi	B
				ON		A.dept_seq	= B.dept_seq
					AND	A.group_seq	= B.group_seq
					AND	A.comp_seq	= B.comp_seq
					AND	A.biz_seq	= B.biz_seq
				LEFT JOIN v_t_co_comp_multi	C
				ON		A.comp_seq	= C.comp_seq
   		</select>
   		
 		<select id="OrgChart.selectOnlyDeptProfileList" parameterClass="hashmap" resultClass="java.util.HashMap">
			/* sqlmap/mysql/neos/cmm/systemx/OrgChart_SQL.xml - OrgChart.selectDeptProfileList   */
			/* 해당 부서 상세 내용 검색 */
			SELECT	 A.group_seq		"groupSeq"
				, A.comp_seq		"compSeq"
				, A.dept_seq		"deptSeq"
				, ' '	AS		"empSeq"
				, parent_dept_seq	"parentDeptSeq"
				
				, $DB_NEOS$FN_GetMultiLang(#langCode#,comp_name_multi)	"compName"	
				, $DB_NEOS$FN_GetMultiLang(#langCode#,dept_name_multi)	"deptName"	
				, ' '	AS		"empName"
				
				, path_name		"pathName"		
				, (A.comp_seq || '|' || path)			"deptPath"
				
				, ' '	AS "dutyName"
				, ' '	AS "positionName"
				, ' '	AS	"dutyCode"
				, ' '	AS	"positionCode"
				
				, 'd' 	AS 		"empDeptFlag"
				, (A.group_seq || '|' || A.comp_seq || '|' || A.dept_seq || '|0|d')	"superKey"
			FROM	(
				SELECT	dept_seq, group_seq, comp_seq, biz_seq, parent_dept_seq, path
				FROM	$DB_NEOS$t_co_dept 
				WHERE 	group_seq	= #groupSeq#  
				AND 	dept_seq = #selectedId# 
				AND	use_yn		= 'Y'
			)	A
				INNER JOIN $DB_NEOS$v_t_co_dept_multi	B
				ON		A.dept_seq	= B.dept_seq
					AND	A.group_seq	= B.group_seq
					AND	A.comp_seq	= B.comp_seq
					AND	A.biz_seq	= B.biz_seq
					AND	B.use_yn	= 'Y'
				INNER JOIN $DB_NEOS$v_t_co_comp_multi	C
				ON		A.comp_seq	= C.comp_seq
					AND	B.lang_code	= B.lang_code
			   		 
   		</select>
   		
   		
   		<select id="OrgChart.selectUserDeptProfileList" parameterClass="hashmap" resultClass="java.util.HashMap">
			/* sqlmap/mysql/neos/cmm/systemx/OrgChart_SQL.xml - OrgChart.selectUserDeptProfileList  */
			/* 부서 소속 사용자와 부서 리스트 검색 */
      		SELECT	 
      			A.group_seq		AS	"groupSeq"
				, A.comp_seq	AS	"compSeq"
				, A.dept_seq	AS	"deptSeq"
				, ''			AS	"empSeq"
				, parent_dept_seq	AS	"parentDeptSeq"
				, ''	AS 		"empNameAdv"
				
				, comp_name		AS	"compName"	
				, NVL(dept_name,'')	AS "deptName"	
				, ''	AS		"empName"
				, NVL(path_name,'')	AS "pathName"		
				, path	AS		"deptPath"
				, ''	AS 		"dutyName"
				, ''	AS 		"positionName"
				, ''	AS		"dutyCode"
				, ''	AS		"positionCode"
				, gbn_org AS 	"empDeptFlag"
				, A.group_seq || '|' || A.comp_seq || '|' || A.dept_seq || '|' || '0|' || gbn_org AS	"superKey"
			FROM	(
				SELECT 	(CASE WHEN gbn_org = 'c' THEN TO_CHAR(0) ELSE TO_CHAR(seq) END ) AS dept_seq
					, group_seq
					, comp_seq
					, biz_seq
					, parent_seq	AS parent_dept_seq
					, path
					, gbn_org
				FROM 	v_org_chart
        		WHERE 	group_seq	= #groupSeq#  
        			AND 	(( CASE WHEN parent_seq = '0' THEN TO_CHAR(comp_seq) ELSE TO_CHAR(parent_seq) END ) = #selectedId# OR seq = #selectedId#) 
			)	A
				LEFT JOIN t_co_dept_multi	B
					ON		A.dept_seq	= B.dept_seq
					AND	A.group_seq	= B.group_seq
					AND	A.comp_seq	= B.comp_seq
					AND	A.biz_seq	= B.biz_seq
					AND	B.use_yn	= 'Y'
					AND	B.lang_code	= #langCode#
				LEFT JOIN t_co_comp_multi	C
				ON		A.comp_seq	= C.comp_seq
		
			UNION
			
			SELECT	
				group_seq	AS	"groupSeq"
				, comp_seq	AS	"compSeq"
				, dept_seq	AS	"deptSeq"
				, emp_seq	AS	"empSeq"
				, ''		AS	"parentDeptSeq"
				, '(' || login_id || ')'	AS "empNameAdv"
				
				, comp_name	AS "compName"	
				, dept_name	AS "deptName"
				, emp_name	AS "empName"
				
				, ''	AS 	"pathName"
				, ''	AS	"deptPath"
			
				, (get_emp_duty_position_name(group_seq,comp_seq, dept_duty_code, 'DUTY', native_lang_code))			AS "dutyName"
				, (get_emp_duty_position_name(group_seq,comp_seq, dept_position_code, 'POSITION', native_lang_code))	AS "positionName"
				, dept_duty_code 		AS	"dutyCode"
				, dept_position_code 	AS	"positionCode"
	
				, 'u' AS 	"empDeptFlag"
				, group_seq || '|' || comp_seq || '|' || dept_seq || '|' || emp_seq || '|u'	  AS  "superKey"
			
			FROM	v_user_info
			WHERE	group_seq 	= #groupSeq#
			AND	dept_seq 	= #selectedId#
			AND	orgchart_display_yn = 'Y'
			AND 	use_yn = 'Y'
   		</select>
   		
		<select id="OrgChart.selectUserDeptExtendProfileList" parameterClass="hashmap" resultClass="java.util.HashMap">
			/* sqlmap/mysql/neos/cmm/systemx/OrgChart_SQL.xml - OrgChart.selectUserDeptExtendProfileList  */
			/* 부서 소속(하위) 사용자 리스트 검색 */
			
			SELECT	
				v.group_seq	"groupSeq"
				, v.comp_seq	"compSeq"
				, v.dept_seq	"deptSeq"
				, v.emp_seq	"empSeq"	
				, ' '	AS	"parentDeptSeq"
				, '(' || login_id || ')' AS "empNameAdv"	
				, $DB_NEOS$FN_GetMultiLang(#langCode#,v.comp_name_multi)	"compName"	
				, $DB_NEOS$FN_GetMultiLang(#langCode#,v.dept_name_multi)	"deptName"
				, $DB_NEOS$FN_GetMultiLang(#langCode#,v.emp_name_multi)	"empName"
				, ' '	AS 	"pathName"	
				, ' '	AS	"deptPath"	
				, ($DB_NEOS$get_emp_duty_position_name(v.group_seq,v.comp_seq, v.dept_duty_code, 'DUTY', #langCode#))		AS "dutyName"
				, ($DB_NEOS$get_emp_duty_position_name(v.group_seq,v.comp_seq, v.dept_position_code, 'POSITION', #langCode#))	AS "positionName"
				, v.dept_duty_code 	AS	"dutyCode"
				, v.dept_position_code 	AS	"positionCode"
				, 'u' AS 	"empDeptFlag"
				, v.group_seq || '|' || v.comp_seq || '|' || v.dept_seq || '|' || emp_seq || '|u' "superKey"
				, v.order_text	AS "dpOrderNum"
				, v.order_text	AS "ddOrderNum"
				, voc.order_num AS "orderNum"
			FROM	$DB_NEOS$v_user_info	v
			INNER JOIN $DB_NEOS$t_co_comp_duty_position dP
				ON 	v.group_seq = dP.group_seq
				AND	dP.dp_type = 'POSITION'
				AND 	v.position_code = dP.dp_seq
			INNER JOIN $DB_NEOS$t_co_comp_duty_position dD
				ON 	v.group_seq = dD.group_seq
				AND	dD.dp_type = 'DUTY'
				AND 	v.duty_code = dD.dp_seq
			INNER JOIN $DB_NEOS$v_org_chart voc
				ON	v.group_seq = voc.group_seq
				AND	v.dept_seq = voc.dept_seq
				AND	'|' || voc.path || '|' LIKE '%|' || #selectedId# || '|%'
			WHERE	v.group_seq 	= #groupSeq#
			<isEqual property="orgGubun" compareValue="c"> 
			AND	(v.comp_seq = #selectedId#
			OR (v.comp_seq = #selectedId# AND parent_gbn='b'))
			</isEqual> 
			<isEqual property="orgGubun" compareValue="b"> 
			AND	     v.biz_seq = #selectedId#
			</isEqual> 
			<isEmpty property="eaYn">
			AND		v.orgchart_display_yn = 'Y'
			AND 	v.ea_display_yn = 'N'
			</isEmpty>			
			<isNotEmpty property="eaYn">
			AND		(v.orgchart_display_yn = 'Y' or v.ea_display_yn = 'Y')			
			</isNotEmpty>
			<isNotEmpty property="targetDeptSeq">
			AND		v.dept_seq = #targetDeptSeq#			
			</isNotEmpty>
			AND 	v.use_yn = 'Y'
			AND v.work_status = '999'
			AND	v.comp_seq = #rootCompId#
			ORDER BY v.order_text

   		</select>   		
   		
   		<select id="OrgChart.selectFilterdUserProfileList" parameterClass="hashmap" resultClass="java.util.HashMap">
	   		/* sqlmap/mysql/neos/cmm/systemx/OrgChart_SQL.xml - OrgChart.selectFilterdUserProfileList   */
			/* 부서 소속 사용자 리스트 검색 - 필터링*/
			SELECT	u.group_seq	AS  "groupSeq"
				, u.comp_seq	AS  "compSeq"
				, u.dept_seq	AS	"deptSeq"
				, u.emp_seq		AS	"empSeq"
				, o.parent_seq 	AS	"parentDeptSeq"
				, '(' || login_id || ')'	AS "empNameAdv"
				
				, u.comp_name	AS	"compName"
				, u.dept_name	AS	"deptName"
				, u.emp_name	AS	"empName"
				, ''			AS 	"pathName"
				, o.path		AS	"deptPath"
				
				, (get_emp_duty_position_name(u.group_seq,u.comp_seq, dept_duty_code, 'DUTY', native_lang_code))		AS "dutyName"
				, (get_emp_duty_position_name(u.group_seq,u.comp_seq, dept_position_code, 'POSITION', native_lang_code))	AS "positionName"
				, dept_duty_code 	AS	"dutyCode"
				, dept_position_code 	AS	"positionCode"
				
				, 'u'	AS 	"empDeptFlag"
				, u.group_seq || '|' || u.comp_seq || '|' || u.dept_seq || '|' || u.emp_seq || '|u'	  AS  "superKey"
			FROM	v_user_info u
				INNER JOIN	v_org_chart o
				ON 	u.dept_seq = o.dept_seq
			WHERE	u.group_seq 	= 	#groupSeq#
			AND	u.emp_name	LIKE	'%$filter$%'
			AND	u.orgchart_display_yn = 'Y'
			AND 	u.use_yn = 'Y'
			AND 	u.work_status = '999'
			<isNotEmpty property="compFilter">
			AND u.comp_seq in ($compFilter$)
			</isNotEmpty>
			<isEmpty property="compFilter">
			AND ( 
					u.comp_seq IN (
						SELECT	DISTINCT 
						IGC.comp_seq 
						FROM 	(
							SELECT	*
							FROM	$DB_NEOS$v_user_info
							WHERE 	emp_seq = #empSeq#
							-- AND		orgchart_display_yn	= 'Y'
							AND 	use_yn			= 'Y'
							AND     work_status = '999'
							AND 	ea_display_yn = 'N'
						)	IUC
							INNER JOIN 	(
								SELECT	GC.comp_seq		'user_comp_seq'
									, GC.groupping_seq	'groupping_seq'
									, AG.comp_seq		'comp_seq'
								FROM	$DB_NEOS$t_co_groupping_comp	GC
									INNER JOIN	$DB_NEOS$t_co_groupping_comp	AG
									ON 	GC.groupping_seq = AG.groupping_seq	
								WHERE	GC.use_yn	= 'Y'
								AND	AG.use_yn	= 'Y'
							)	IGC
							ON	IUC.comp_seq = IGC.user_comp_seq
						UNION
						SELECT	comp_seq
						FROM	$DB_NEOS$v_user_info
						WHERE 	emp_seq = #empSeq#
						-- AND		orgchart_display_yn	= 'Y'
						AND 	use_yn			= 'Y'
						AND     work_status = '999'
						AND 	ea_display_yn = 'N'
					)
				)	
			</isEmpty>
			AND 	u.dept_name IS NOT NULL
   		</select>
   		
   		<select id="OrgChart.selectUserDeptExtendProfileListAttend" parameterClass="hashmap" resultClass="egovMap">
			/* sqlmap/mysql/neos/cmm/systemx/OrgChart_SQL.xml - OrgChart.selectUserDeptExtendProfileList - oracle */
			/* 부서 소속(하위) 사용자 리스트 검색 근태사용자만 검색 */
			
			SELECT	
				v.group_seq	"groupSeq"
				, v.comp_seq	"compSeq"
				, v.dept_seq	"deptSeq"
				, v.emp_seq	"empSeq"	
				, ' '	AS	"parentDeptSeq"
				, ('(' || login_id || ')')	AS "empNameAdv"	
				, $DB_NEOS$FN_GetMultiLang(#langCode#,v.comp_name_multi)	"compName"	
				, $DB_NEOS$FN_GetMultiLang(#langCode#,v.dept_name_multi)	"deptName"
				, $DB_NEOS$FN_GetMultiLang(#langCode#,v.emp_name_multi)	"empName"
				, ' '	AS 	"pathName"	
				, ' '	AS	"deptPath"	
				, ($DB_NEOS$get_emp_duty_position_name(v.group_seq,v.comp_seq, v.dept_duty_code, 'DUTY', #langCode#))		AS "dutyName"
				, ($DB_NEOS$get_emp_duty_position_name(v.group_seq,v.comp_seq, v.dept_position_code, 'POSITION', #langCode#))	AS "positionName"
				, v.dept_duty_code 	AS	"dutyCode"
				, v.dept_position_code 	AS	"positionCode"
				, 'u' AS 	"empDeptFlag"
				, (v.group_seq || '|' || v.comp_seq || '|' || v.dept_seq || '|' || emp_seq || '|u')	"superKey"
				, v.order_text	AS "dp_order_num"
				, v.order_text	AS "dd_order_num"
				, voc.order_num AS "order_num"
			FROM	$DB_NEOS$v_user_info	v
			INNER JOIN $DB_NEOS$t_co_comp_duty_position dP
				ON 	v.group_seq = dP.group_seq
				AND	dP.dp_type = 'POSITION'
				AND 	v.position_code = dP.dp_seq
			INNER JOIN $DB_NEOS$t_co_comp_duty_position dD
				ON 	v.group_seq = dD.group_seq
				AND	dD.dp_type = 'DUTY'
				AND 	v.duty_code = dD.dp_seq
			INNER JOIN $DB_NEOS$v_org_chart voc
				ON	v.group_seq = voc.group_seq
				AND	v.dept_seq = voc.dept_seq
				AND	('|' || voc.path || '|') LIKE ('%|' || #selectedId# || '|%')
			WHERE	v.group_seq 	= #groupSeq#
			AND v.ea_display_yn = 'N'
			AND	
				((v.orgchart_display_yn = 'Y'
				AND v.use_yn = 'Y'
				AND v.work_status = '999'
				AND	v.comp_seq = #compSeq#
				AND v.check_work_yn = 'Y'
				AND v.main_dept_yn = 'Y')
			OR
				(v.work_status = '999' 
				AND v.comp_seq = #compSeq# 
				AND v.main_dept_yn='Y' 
				AND v.check_work_yn= 'Y'
				AND v.license_check_yn='3'))
			ORDER BY (CASE WHEN voc.seq = voc.path THEN '0' ELSE SUBSTR(voc.path,1,LENGTH(voc.path) - LENGTH(voc.seq)) END ), voc.order_num, LENGTH("deptPath"), "dp_order_num", "dd_order_num"

   		</select>
   		
   		<select id="OrgChart.selectFilterdCompProfileList" parameterClass="hashmap" resultClass="egovMap">
	   		/* sqlmap/mysql/neos/cmm/systemx/OrgChart_SQL.xml - OrgChart.selectFilterdCompProfileList   */
			/* 회사 리스트 검색 - 필터링*/
			SELECT	ORG.group_seq	AS "groupSeq"
				, COMP.comp_seq	AS "compSeq"
				, ' '		AS "deptSeq"
				, ' '		AS "empSeq"
				, ORG.parent_seq	AS "parentDeptSeq"
				, $DB_NEOS$FN_GetMultiLang(#langCode#,COMP.comp_name_multi)	AS "compName"
				, ' '		AS "deptName"
				, ' '		AS "empName"
				, ' '	 	AS "pathName"
				, COMP.comp_seq		AS "deptPath"
				
				, ' '	AS "dutyName"
				, ' '	AS "positionName"
				, ' '	AS	"dutyCode"
				, ''	AS	"positionCode"
				
				, 'c'		AS "empDeptFlag"
				, (ORG.group_seq || '|' || COMP.comp_seq || '|' || '0' || '|' || '0|c')	"superKey"
			FROM	(
				SELECT	*
				FROM	$DB_NEOS$v_org_chart
				WHERE	group_seq = #groupSeq#
					AND	gbn_org = 'c'
			)	ORG
				INNER JOIN	$DB_NEOS$v_t_co_comp_multi COMP
				ON	ORG.group_seq = COMP.group_seq
				AND	ORG.seq = COMP.comp_seq
			WHERE	COMP.comp_name	LIKE	'%$filter$%'
			<isNotEmpty property="compFilter">
			AND COMP.comp_seq in ($compFilter$)
			</isNotEmpty>
			ORDER BY order_num
   		</select>
   		
   		
   		<select id="OrgChart.selectFilterdDeptProfileList" parameterClass="hashmap" resultClass="egovMap">
	   		/* sqlmap/mysql/neos/cmm/systemx/OrgChart_SQL.xml - OrgChart.selectFilterdDeptProfileList   */
			/* 부서 소속 부서 리스트 검색 - 필터링*/
			SELECT	 A.group_seq		"groupSeq"
				, A.comp_seq		"compSeq"
				, A.dept_seq		"deptSeq"
				, ' '	AS		"empSeq"
				, parent_dept_seq	"parentDeptSeq"
				
				, $DB_NEOS$FN_GetMultiLang(#langCode#,comp_name_multi)		"compName"	
				, $DB_NEOS$FN_GetMultiLang(#langCode#,dept_name_multi)		"deptName"	
				, ' '	AS		"empName"
				
				, path_name		"pathName"		
				, (A.comp_seq || '|' || path)	"deptPath"
				
				, ' '	AS "dutyName"
				, ' '	AS "positionName"
				, ' '	AS	"dutyCode"
				, ' '	AS	"positionCode"
				
				, gbn_org 	AS 		"empDeptFlag"
				, (A.group_seq || '|' || A.comp_seq || '|' || A.dept_seq || '|' || '0|' || gbn_org)	"superKey"
				, D.display_yn AS	"bizUseYn"
			FROM	(
				SELECT 	(CASE gbn_org WHEN 'c' THEN '0' ELSE seq END ) dept_seq
					, group_seq
					, comp_seq
					, biz_seq
					, parent_seq as parent_dept_seq
					, path
					, gbn_org
				FROM 	$DB_NEOS$v_org_chart
				WHERE 	group_seq	= #groupSeq#  
			)	A
				INNER JOIN $DB_NEOS$v_t_co_dept_multi	B
				ON		A.dept_seq	= B.dept_seq
					AND	A.group_seq	= B.group_seq
					AND	A.comp_seq	= B.comp_seq
					AND	A.biz_seq	= B.biz_seq
					AND	B.use_yn	= 'Y'
					AND	dept_name	LIKE	'%$filter$%'
				INNER JOIN $DB_NEOS$v_t_co_comp_multi	C
				ON		A.comp_seq	= C.comp_seq
				<isNotEmpty property="compFilter">
				AND A.comp_seq in ($compFilter$)
				</isNotEmpty>
				INNER JOIN $DB_NEOS$t_co_biz D
				ON		A.biz_seq = D.biz_seq
				AND		D.use_yn = 'Y'
   		</select>
   		
   		
   		<select id="OrgChart.selectFilterdDeptProfileListAdmin" parameterClass="hashmap" resultClass="java.util.HashMap">
	   		/* sqlmap/mysql/neos/cmm/systemx/OrgChart_SQL.xml - OrgChart.selectFilterdDeptProfileListAdmin   */
			/* 부서 소속 부서 리스트 검색(부서사용유무 상관없이 검색) - 필터링*/
			SELECT	 
        		A.group_seq		AS	"groupSeq"
				, A.comp_seq	AS	"compSeq"
				, A.dept_seq	AS	"deptSeq"
				, ''			AS	"empSeq"
				, parent_dept_seq	AS "parentDeptSeq"
				
				, comp_name		AS	"compName"
				, dept_name		AS	"deptName"	
				, ''			AS	"empName"
				
				, path_name		AS	"pathName"		
				, A.comp_seq || '|' || path		AS	"deptPath"
				
				, ' '	AS "dutyName"
				, ' '	AS "positionName"
				, ' '	AS	"dutyCode"
				, ' '	AS	"positionCode"
				
				, 'd' 	AS 		"empDeptFlag"
				, (A.group_seq || '|' || A.comp_seq || '|' || A.dept_seq || '|0|d')	"superKey"
			FROM	(
				SELECT	dept_seq, group_seq, comp_seq, biz_seq, parent_dept_seq, path, order_num
				FROM	$DB_NEOS$t_co_dept 
				WHERE 	group_seq	= #group_seq#
			)	A
				INNER JOIN $DB_NEOS$v_t_co_dept_multi	B
				ON		A.dept_seq	= B.dept_seq
					AND	A.group_seq	= B.group_seq
					AND	A.comp_seq	= B.comp_seq
					AND	A.biz_seq	= B.biz_seq
					AND	dept_name	LIKE	'%$searchDept$%'
				INNER JOIN $DB_NEOS$v_t_co_comp_multi	C
			ON		A.comp_seq	= C.comp_seq
				AND	A.group_seq	= C.group_seq
			INNER JOIN $DB_NEOS$t_co_comp D
			ON		A.comp_seq 	= D.comp_seq
				AND	A.group_seq	= D.group_seq
				AND	D.use_yn = 'Y'
				<isNotEmpty property="compSeq">
				AND A.comp_seq = #compSeq#
				</isNotEmpty>
			ORDER BY A.order_num, A.path 
   		</select>
   		
   		<select id="OrgChart.selectFilterdUserDeptProfileList" parameterClass="hashmap" resultClass="java.util.HashMap">
	   		/* sqlmap/mysql/neos/cmm/systemx/OrgChart_SQL.xml - OrgChart.selectFilterdUserDeptProfileList   */
			/* 부서 소속 부서 리스트 검색 - 필터링*/
			SELECT	 
       			A.group_seq		AS	"groupSeq"
				, A.comp_seq	AS	"compSeq"
				, A.dept_seq	AS	"deptSeq"
				, ''			AS	"empSeq"
				, parent_dept_seq	AS "parentDeptSeq"
				, comp_name		AS	"compName"
				, dept_name		AS	"deptName"	
				, ''			AS	"empName"
				, path_name		AS	"pathName"
				, A.comp_seq || '|' || path AS "deptPath"
				
				, ''			AS	"dutyName"
				, ''			AS	"positionName"
				, ''			AS	"dutyCode"
				, ''			AS	"positionCode"
				
				, gbn_org AS 		"empDeptFlag"
	
				, A.group_seq || '|' || A.comp_seq || '|' || A.dept_seq || '|' || '0|' || gbn_org AS	"superKey"
			FROM	(
				SELECT 	(CASE gbn_org WHEN 'c' THEN TO_CHAR(0) ELSE TO_CHAR(seq) END ) AS dept_seq
					, group_seq
					, comp_seq
					, biz_seq
					, parent_seq	AS parent_dept_seq
					, path
					, gbn_org
				FROM 	v_org_chart
				WHERE 	group_seq	= #groupSeq# 
			)	A
				LEFT JOIN t_co_dept_multi	B
				ON		A.dept_seq	= B.dept_seq
					AND	A.group_seq	= B.group_seq
					AND	A.comp_seq	= B.comp_seq
					AND	A.biz_seq	= B.biz_seq
					AND	B.use_yn	= 'Y'
					AND	B.lang_code	= #langCode#
					AND	dept_name	LIKE	'%$filter$%'
				INNER JOIN t_co_comp_multi	C
				ON		A.comp_seq	= C.comp_seq
			
				<isNotEmpty property="compFilter">
				AND A.comp_seq in ($compFilter$)
				</isNotEmpty>
   		</select>
   		
   		<select id="OrgChart.selectedEmpDeptProfileList" parameterClass="hashmap" resultClass="egovMap">
			/* OrgChart.selectedEmpDeptProfileList - oracle */
			
			SELECT	
				group_seq
				, comp_seq
				, dept_seq
				, emp_seq	
				, ' '	AS	parent_dept_seq
				, $DB_NEOS$FN_GetMultiLang(#langCode#,comp_name_multi) comp_name
				, $DB_NEOS$FN_GetMultiLang(#langCode#,dept_name_multi) dept_name
				, $DB_NEOS$FN_GetMultiLang(#langCode#,emp_name_multi) emp_name
				, ' '	AS 	path_name
				, ' '	AS	dept_path	
				, ($DB_NEOS$get_emp_duty_position_name(group_seq,comp_seq, dept_duty_code, 'DUTY', #langCode#))		AS duty_name
				, ($DB_NEOS$get_emp_duty_position_name(group_seq,comp_seq, dept_position_code, 'POSITION', #langCode#))	AS position_name
				, dept_duty_code 	AS	duty_code
				, dept_position_code 	AS	position_code
				, 'u' AS 	emp_dept_flag
				, group_seq || '|' || comp_seq || '|' || dept_seq || '|' || emp_seq || '|u'	super_key
			FROM	$DB_NEOS$v_user_info
			WHERE	use_yn = 'Y'
			<isEmpty property="authPopYn">
				<isEmpty property="eaYn">
				AND		orgchart_display_yn = 'Y'
				AND 	ea_display_yn = 'N'
				</isEmpty>			
				<isNotEmpty property="eaYn">
				AND		(orgchart_display_yn = 'Y' or ea_display_yn = 'Y')			
				</isNotEmpty>
			</isEmpty>			
			AND     work_status = '999'
			AND	(	
				dept_seq || '_' || emp_seq IN ($whereClause_emp$)
			)
			UNION
			SELECT	 
				A.group_seq
				, A.comp_seq	
				, A.dept_seq
				, '' AS 		emp_seq
				, parent_dept_seq	parent_dept_seq
				, $DB_NEOS$FN_GetMultiLang(#langCode#,comp_name_multi)	comp_name
				, $DB_NEOS$FN_GetMultiLang(#langCode#,dept_name_multi)	dept_name
				, '' AS 		emp_name
				, NVL(path_name,'')		path_name	
				, path			deptPath
				, ''	AS duty_name
				, ''	AS position_name
				, ''	AS duty_code
				, ''	AS position_code
				, gbn_org AS 		emp_dept_flag
				, A.group_seq || '|' || A.comp_seq || '|' || A.dept_seq || '|0|' || gbn_org as super_key
			FROM	(
				SELECT 	(CASE gbn_org WHEN 'c' THEN '0' ELSE seq END ) dept_seq
					, group_seq
					, comp_seq
					, biz_seq
					, parent_seq as parent_dept_seq
					, path
					, gbn_org
				FROM 	$DB_NEOS$v_org_chart
				WHERE 	(
					(gbn_org = 'c' AND seq IN ($whereClause_comp$))
					OR 
					(gbn_org = 'd' AND seq IN ($whereClause_dept$))
				)
			)	A
				LEFT JOIN $DB_NEOS$v_t_co_dept_multi	B
				ON		A.dept_seq	= B.dept_seq
					AND	A.group_seq	= B.group_seq
					AND	A.comp_seq	= B.comp_seq
					AND	A.biz_seq	= B.biz_seq
					AND	B.use_yn	= 'Y'
				INNER JOIN $DB_NEOS$v_t_co_comp_multi	C
				ON		A.comp_seq	= C.comp_seq
					
   		</select>
   		
   		<select id="OrgChart.selectedEmpDeptProfileListEmpUniq" parameterClass="hashmap" resultClass="egovMap">
   			/* OrgChart.selectedEmpDeptProfileListEmpUniq - oracle */
   			
			select
					super_key,
					emp_dept_flag,
					use_yn,
					NVL(path_name,org_name) as path_name,
					org_name, 
					case when emp_dept_flag = 'c' then org_name else comp_name end as comp_name,
					case when emp_dept_flag = 'd' then org_name else dept_name end as dept_name,
					position_name,
					duty_name, 
					emp_name,
					comp_seq,
					dept_seq,
					emp_seq,
					position_code,
					duty_code
			from 
			(   			
				select
				(c.group_seq || '|' || c.comp_seq || '|0|0|c')	super_key,
				'c' as emp_dept_flag,
				case when c.comp_seq in ($compFilter$) then c.use_yn else 'N' end as use_yn,
				$DB_NEOS$fn_getmultilang(#langCode#,cm.comp_name_multi) as path_name,
				$DB_NEOS$fn_getmultilang(#langCode#,cm.comp_name_multi) as org_name,
				0 as order1,
				TO_CHAR(c.order_num) as order2,
				'0' as order3,
				' ' as comp_name,
				' ' as dept_name,
				' ' as position_name,
				' ' as duty_name,
				' ' as emp_name,
				c.comp_seq as comp_seq,
				' ' as dept_seq,
				' ' as emp_seq,
				' ' as position_code,
				' ' as duty_code	
				from $DB_NEOS$t_co_comp c
				join $DB_NEOS$v_t_co_comp_multi cm on c.comp_seq = cm.comp_seq
				where c.comp_seq in ($whereClause_comp$)
				
				union
				
				select
				(d.group_seq || '|' || d.comp_seq || '|' || d.dept_seq || '|0|d')	super_key,
				'd' as emp_dept_flag,
				case when c.comp_seq not in ($compFilter$) then 'N' when d.use_yn = 'Y' and c.use_yn = 'Y' and d.display_yn = 'Y' then 'Y' else 'N' end as use_yn,
				($DB_NEOS$fn_getmultilang(#langCode#,cm.comp_name_multi) || ' ' || $DB_NEOS$get_dept_pathNm(' ', d.dept_seq, d.group_seq, #langCode#)) as path_name,
				$DB_NEOS$fn_getmultilang(#langCode#,dm.dept_name_multi) as org_name,
				1 as order1,
				TO_CHAR(c.order_num) as order2,
				TO_CHAR(d.order_num) as order3,
				$DB_NEOS$fn_getmultilang(#langCode#,cm.comp_name_multi) as comp_name,
				' ' as dept_name,
				' ' as position_name,
				' ' as duty_name,
				' ' as emp_name,
				c.comp_seq as comp_seq,
				d.dept_seq as dept_seq,
				' ' as emp_seq,
				' ' as position_code,
				' ' as duty_code				
				from $DB_NEOS$t_co_dept d
				join $DB_NEOS$t_co_comp c on d.comp_seq = c.comp_seq
				join $DB_NEOS$v_t_co_comp_multi cm on c.comp_seq = cm.comp_seq
				join $DB_NEOS$v_t_co_dept_multi dm on d.dept_seq = dm.dept_seq
				where d.dept_seq in ($whereClause_dept$)
				
				union
				
				select
				(e.group_seq || '|0|0|' || e.emp_seq || '|u')	super_key,
				'u' as emp_dept_flag,
				case when ec.emp_seq is null then 'N' else 'Y' end as use_yn,
				($DB_NEOS$fn_getmultilang(#langCode#,cm.comp_name_multi) || ' ' || $DB_NEOS$get_dept_pathNm(' ', ed.dept_seq, ed.group_seq, #langCode#)) as path_name,
				($DB_NEOS$fn_getmultilang(#langCode#,em.emp_name_multi) || '(' || e.login_id || ')') as org_name,
				2 as order1,
				e.emp_seq as order2,
				nvl(ed.order_text,'Z') as order3,
				$DB_NEOS$fn_getmultilang(#langCode#,cm.comp_name_multi) as comp_name,
				$DB_NEOS$fn_getmultilang(#langCode#,dm.dept_name_multi) as dept_name,
				$DB_NEOS$get_emp_duty_position_name(ed.group_seq, ed.comp_seq, ed.position_code, 'POSITION', #langCode#) as position_name,
				$DB_NEOS$get_emp_duty_position_name(ed.group_seq, ed.comp_seq, ed.duty_code, 'DUTY', #langCode#) as duty_name,
				$DB_NEOS$fn_getmultilang(#langCode#,em.emp_name_multi) as emp_name,
				ed.comp_seq as comp_seq,
				ed.dept_seq as dept_seq,
				e.emp_seq as emp_seq,
				ed.position_code as position_code,
				ed.duty_code as duty_code				
				from $DB_NEOS$t_co_emp e
				left join $DB_NEOS$v_t_co_emp_multi em on e.emp_seq = em.emp_seq
        		left join $DB_NEOS$t_co_emp_comp ec on ec.emp_seq = e.emp_seq and ec.use_yn = 'Y' and ec.comp_seq in ($compFilter$)
				left join $DB_NEOS$t_co_emp_dept ed on ec.comp_seq = ed.comp_seq and ec.emp_seq = ed.emp_seq and ed.orgchart_display_yn = 'Y' and NVL(ed.ea_display_yn,'N') = 'N'
				left join $DB_NEOS$v_t_co_dept_multi dm on ed.dept_seq = dm.dept_seq
				left join $DB_NEOS$v_t_co_comp_multi cm on ed.comp_seq = cm.comp_seq
				where e.emp_seq in ($whereClause_emp$)
				order by order1, order2, order3
			) result
			order by order1, order2, order3
   		</select>
   		
    	<select id="OrgChart.selectUserProfileListEmpUniq" parameterClass="hashmap" resultClass="egovMap">
    		/* OrgChart.selectUserProfileListEmpUniq - oracle */
    		
			select
					super_key,
					emp_dept_flag,
					'Y' as use_yn,
					NVL(path_name,org_name) as path_name,
					org_name, 
					case when emp_dept_flag = 'c' then org_name else comp_name end as comp_name,
					case when emp_dept_flag = 'd' then org_name else dept_name end as dept_name,
					position_name,
					duty_name, 
					emp_name,
					comp_seq,
					dept_seq,
					emp_seq,
					position_code,
					duty_code			
			from 
			(
				select
				(e.group_seq || '|0|0|' || e.emp_seq || '|u') super_key,
				'u' as emp_dept_flag,
				(
					select LISTAGG(replace($DB_NEOS$get_dept_pathNm(' ', ed0.dept_seq, ed0.group_seq, #langCode#),',','.'), ',') WITHIN GROUP(ORDER BY replace($DB_NEOS$get_dept_pathNm(' ', ed0.dept_seq, ed0.group_seq, #langCode#),',','.'))
					from $DB_NEOS$t_co_emp e0
					join $DB_NEOS$t_co_emp_dept ed0 on e0.emp_seq=ed0.emp_seq and ed0.use_yn = 'Y' and NVL(ed0.ea_display_yn,'N')='N' and ed0.orgchart_display_yn = 'Y'
					join $DB_NEOS$t_co_emp_comp ec0 on ed0.comp_seq=ec0.comp_seq and ed0.emp_seq=ec0.emp_seq and ec0.work_status = '999' and ec0.use_yn='Y'
					join $DB_NEOS$t_co_dept d0 on ed0.dept_seq=d0.dept_seq and d0.use_yn = 'Y' and NVL(d0.display_yn,'Y') = 'Y'
					join $DB_NEOS$t_co_comp c0 on ed0.comp_seq=c0.comp_seq and c0.use_yn='Y'
					where e0.emp_seq=e.emp_seq and c0.comp_seq in ($compFilter$)
				) as path_name,      
				($DB_NEOS$fn_getmultilang(#langCode#,em.emp_name_multi) || '(' || e.login_id || ')') as org_name,
				2 as order1,
				c.order_num as order2,
				d.order_num as order3,
                ed.order_text as order4,
				$DB_NEOS$fn_getmultilang(#langCode#,cm.comp_name_multi) as comp_name,
				$DB_NEOS$fn_getmultilang(#langCode#,dm.dept_name_multi) as dept_name,
				$DB_NEOS$get_emp_duty_position_name(ed.group_seq, ed.comp_seq, ed.position_code, 'POSITION', #langCode#) as position_name,
				$DB_NEOS$get_emp_duty_position_name(ed.group_seq, ed.comp_seq, ed.duty_code, 'DUTY', #langCode#) as duty_name,
				$DB_NEOS$fn_getmultilang(#langCode#,em.emp_name_multi) as emp_name,
				ed.comp_seq as comp_seq,
				ed.dept_seq as dept_seq,
				ed.emp_seq as emp_seq,
				ed.position_code as position_code,
				ed.duty_code as duty_code
				from $DB_NEOS$t_co_emp e
				join $DB_NEOS$v_t_co_emp_multi em on e.emp_seq = em.emp_seq
				join $DB_NEOS$t_co_emp_dept ed on e.emp_seq = ed.emp_seq and ed.use_yn = 'Y' and NVL(ed.ea_display_yn,'N')='N' and ed.orgchart_display_yn = 'Y'
				join $DB_NEOS$t_co_emp_comp ec on ed.comp_seq=ec.comp_seq and ed.emp_seq = ec.emp_seq and ec.work_status='999' and ec.use_yn='Y'
				join $DB_NEOS$t_co_comp c on ed.comp_seq = c.comp_seq and c.use_yn = 'Y' and c.comp_seq in ($compFilter$)
				join $DB_NEOS$t_co_dept d on ed.dept_seq = d.dept_seq and d.use_yn = 'Y' and NVL(d.display_yn,'Y') = 'Y'
				join $DB_NEOS$v_t_co_dept_multi dm on d.dept_seq = dm.dept_seq
				join $DB_NEOS$v_t_co_comp_multi cm on ed.comp_seq = cm.comp_seq
				where
				<isEqual property="isCheckAllDeptEmpShow" compareValue="true">
					<isEqual property="orgGubun" compareValue="c">
						d.comp_seq = #selectedId#
					</isEqual>
					<isEqual property="orgGubun" compareValue="b">
						d.biz_seq = #selectedId#
					</isEqual>				
					<isEqual property="orgGubun" compareValue="d">
						'|' || d.path || '|' like '%|$selectedId$|%'
					</isEqual>
				</isEqual>
				<isNotEqual property="isCheckAllDeptEmpShow" compareValue="true">
					<isEqual property="orgGubun" compareValue="d">
						d.dept_seq = #selectedId#
					</isEqual>			
					<isNotEqual property="orgGubun" compareValue="d">
						1=0
					</isNotEqual>			
				</isNotEqual>						
			     
				<isEqual property="selectMode" compareValue="ud">
					<isEqual property="orgGubun" compareValue="c">
						union
						select
						c.group_seq || '|' || c.comp_seq || '|0|0|c' as super_key,
						'c' as emp_dept_flag,
						replace($DB_NEOS$fn_getmultilang(#langCode#,cm.comp_name_multi),',','.') as path_name,
						$DB_NEOS$fn_getmultilang(#langCode#,cm.comp_name_multi) as org_name,
						0 as order1,
						c.order_num as order2,
						0 as order3,
						0 as order4,
						'' as comp_name,
						'' as dept_name,
						'' as position_name,
						'' as duty_name,
						'' as emp_name,
						c.comp_seq as comp_seq,
						'' as dept_seq,
						'' as emp_seq,
						'' as position_code,
						'' as duty_code						
						from $DB_NEOS$t_co_comp c
						join $DB_NEOS$v_t_co_comp_multi cm on c.comp_seq = cm.comp_seq
						where c.comp_seq = #selectedId#					
					</isEqual>
					union
					select
					d.group_seq || '|' || d.comp_seq || '|' || d.dept_seq || '|0|d' as super_key,
					'd' as emp_dept_flag,
					replace($DB_NEOS$fn_getmultilang(#langCode#,cm.comp_name_multi) || ' ' || $DB_NEOS$get_dept_pathNm(' ', d.dept_seq, d.group_seq, #langCode#),',','.') as path_name,
					$DB_NEOS$fn_getmultilang(#langCode#,dm.dept_name_multi) as org_name,
					1 as order1,
					c.order_num as order2,
					d.order_num as order3,
					1 as order4,
					$DB_NEOS$fn_getmultilang(#langCode#,cm.comp_name_multi) as comp_name,
					'' as dept_name,
					'' as position_name,
					'' as duty_name,
					'' as emp_name,
					c.comp_seq as comp_seq,
					d.dept_seq as dept_seq,
					'' as emp_seq,
					'' as position_code,
					'' as duty_code
					from $DB_NEOS$t_co_dept d
					join $DB_NEOS$t_co_comp c on d.comp_seq = c.comp_seq and NVL(d.display_yn,'Y') = 'Y' and d.use_yn = 'Y'
					join $DB_NEOS$v_t_co_comp_multi cm on c.comp_seq = cm.comp_seq
					join $DB_NEOS$v_t_co_dept_multi dm on d.dept_seq = dm.dept_seq
					where
					<isEqual property="orgGubun" compareValue="c">
						d.comp_seq = #selectedId# and d.parent_dept_seq = '0'
					</isEqual>
					<isEqual property="orgGubun" compareValue="b">
						d.biz_seq = #selectedId# and d.parent_dept_seq = '0'
					</isEqual>				
					<isEqual property="orgGubun" compareValue="d">
						d.dept_seq = #selectedId#
					</isEqual>								
				</isEqual>
				order by order1, order2, order3, order4
			) result
   		</select>   		
   		
   		<select id="OrgChart.getCompList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
   		/* OrgChart.getCompList - oracle */
			SELECT 
          		A.group_seq			AS	"grp_seq",
		       A.gbn_org			AS	"gbn_org",
		       A.seq				AS	"id",
		       A.comp_seq			AS	"comp_seq",
		       NVL(B.comp_name, ' ') AS	"comp_name",
		       A.biz_seq 			AS	"biz_seq",
		       NVL(C.biz_name, ' ') 	AS	"biz_name",
		       A.dept_seq 			AS	"dept_seq",
		       NVL(D.dept_name, ' ') AS	"dept_name",
		       A.parent_seq 		AS	"parent",
		       '1'					AS	"level",
		       A.order_num 			AS	"order",
		       A.path 				AS	"path",
		       
		       CASE 
			       WHEN gbn_org = 'c' THEN 	NVL(B.comp_name, ' ')
			       WHEN gbn_org = 'b' THEN 	NVL(C.biz_name, ' ')
			       ELSE 					NVL(D.dept_name, ' ') 
			       END 					AS "text",
		       (
            		SELECT 	COUNT(*)
		        	FROM 	v_org_chart E
            		WHERE 	A.group_seq = E.group_seq
              			AND A.seq 		= E.parent_seq
           		) 	AS "children_cnt"
           		
		FROM	v_org_chart	A
			LEFT OUTER JOIN	t_co_comp_multi B
				ON	A.gbn_org	=	'c' 
				AND	A.comp_seq	=	B.comp_seq 
				AND	B.use_yn	=	'Y'
			LEFT OUTER JOIN t_co_biz_multi C
				ON	A.gbn_org	= 'b' 
				AND	A.biz_seq	= C.biz_seq 
				AND	C.use_yn	= 'Y'
			LEFT OUTER JOIN t_co_dept_multi D
				ON A.gbn_org	= 'd' 
				AND A.dept_seq	= D.dept_seq 
				AND D.use_yn	= 'Y'
		WHERE	A.group_seq		= #groupSeq#
			AND	A.parent_seq	= '0'
		ORDER BY A.order_num   
   		</select>
   		
  		<select id="OrgChart.selectOrgFullList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap" remapResults="true">
				SELECT	ORG.seq 						AS "id"
				, NVL(ORG.org_cd, ' ') as "orgCd"
				, NVL(NVL(NVL($DB_NEOS$FN_GetMultiLang(#langCode#,comp.comp_name_multi),$DB_NEOS$FN_GetMultiLang(#langCode#,dept.dept_name_multi)),$DB_NEOS$FN_GetMultiLang(#langCode#,biz.biz_name_multi)),' ') 	AS "text"				
				, NVL(parent_seq,0) 					AS "parent_seq"
				, NVL( (path || '|'),' ')			    AS	"path"
				<isNotEmpty property="depthOption">
				, ' ' AS "depthLength"
				</isNotEmpty>
				, CASE WHEN ORG.gbn_org = 'c' THEN ' ' ELSE  REPLACE(NVL( (path || '|'),' '), ('|' || ORG.seq || '|'),'|') END	AS	"parent_path"
				, CASE WHEN path  = #deptPath#	THEN '1' ELSE '0'  END 			AS "selected"
				, CASE WHEN #deptPath# LIKE CONCAT(path,'|%')	THEN '1'
				<isNotEmpty property="depthOption">
				WHEN ORG."level" <![CDATA[<=]]> trim(#depthOption#) THEN '1'
				</isNotEmpty>
				 ELSE '0'  END 	AS "opened"
				, ORG.gbn_org						AS	"orgDiv"
				, NVL(ORG.inner_receive_yn, 'Y')	AS "innerReceiveYn"
			FROM	(
				SELECT 	* 
				FROM 	$DB_NEOS$v_org_chart
				WHERE 	group_seq = #groupSeq#
				<isNotEmpty property="targetDeptSeq">
				AND ('|' || (select path from $DB_NEOS$v_org_Chart where seq = #targetDeptSeq#)) like ('%|' || path || '%')
				</isNotEmpty>
				<isEmpty property="eaYn">
				AND (ea_yn = 'N' or ea_yn is null or ea_yn = null)
				</isEmpty>
				<isNotEmpty property="compFilter">
				-- 개발자 선택 필터링.
				AND comp_seq in ($compFilter$)
				</isNotEmpty>
				<!-- 그루핑 동시 적용 코드, 그루핑이 이상이 있는경우 아래의 where절 확인 필요. -->
				<isEmpty property="compFilter">
				AND ( 
					comp_seq IN (
						SELECT	DISTINCT 
						IGC.comp_seq 
						FROM 	(
							SELECT	*
							FROM	$DB_NEOS$v_user_info
							WHERE 	emp_seq = #empSeq#
							AND 	use_yn			= 'Y'
							AND     work_status = '999'
							AND 	ea_display_yn = 'N'
						)	IUC
							INNER JOIN 	(
								SELECT	GC.comp_seq		user_comp_seq
									, GC.groupping_seq	groupping_seq
									, AG.comp_seq		comp_seq
								FROM	$DB_NEOS$t_co_groupping_comp	GC
									INNER JOIN	$DB_NEOS$t_co_groupping_comp	AG
									ON 	GC.groupping_seq = AG.groupping_seq	
								WHERE	GC.use_yn	= 'Y'
								AND	AG.use_yn	= 'Y'
							)	IGC
							ON	IUC.comp_seq = IGC.user_comp_seq
						UNION
	
						SELECT	comp_seq
						FROM	$DB_NEOS$v_user_info
						WHERE 	emp_seq = #empSeq#
						AND 	use_yn			= 'Y'
						AND     work_status = '999'
						AND 	ea_display_yn = 'N'
					)
					<isEqual property="userSe" compareValue="MASTER">
					OR
					#empSeq# IN (
						SELECT DISTINCT
								emp_seq 
						FROM	$DB_NEOS$t_co_emp_option 
						WHERE 	master_use_yn = 'Y'
					)
					</isEqual>
					<isEqual property="isAllCompShow" compareValue="true">
					OR
					comp_seq IN (
						select DISTINCT
								comp_seq
						from $DB_NEOS$t_co_comp
						WHERE use_yn = 'Y'
					)						
					</isEqual>
				)	
				</isEmpty>			
			)	ORG
				LEFT JOIN	$DB_NEOS$v_t_co_comp_multi	COMP
				ON		ORG.gbn_org = 'c'
					AND	ORG.seq = COMP.comp_seq
					AND	COMP.group_seq = ORG.group_seq
					AND comp.lang_code = #langCode#
				LEFT JOIN	$DB_NEOS$v_t_co_dept_multi	DEPT
				ON		ORG.gbn_org = 'd'
					AND	ORG.seq = DEPT.dept_seq
					AND	DEPT.group_seq = ORG.group_seq
					AND DEPT.lang_code = #langCode#
				LEFT JOIN	$DB_NEOS$v_t_co_biz_multi	BIZ
				ON		ORG.gbn_org = 'b'
					AND	ORG.seq = BIZ.biz_seq
					AND	BIZ.group_seq = ORG.group_seq	
					AND BIZ.lang_code = #langCode#
				LEFT JOIN $DB_NEOS$t_Co_biz	cb 
				on	ORG.biz_Seq = cb.biz_Seq
			<isNotEmpty property="bizTree">
			WHERE	ORG.gbn_org = 'c' OR ORG.gbn_org = 'b'
			</isNotEmpty>
			ORDER BY cb.order_num, (CASE WHEN ORG.seq = ORG.path THEN '0' ELSE SUBSTR(ORG.path,'1',LENGTH(ORG.path) - LENGTH(ORG.seq)) END ), ORG.order_num, ORG.org_cd
   		</select>
   		
  		<select id="OrgChart.selectOrgPartList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap" remapResults="true">
  		
			select
			compSeq
			,id as "id"
			,orgCd as "orgCd"
			,orgName as "text"
			,parentSeq as "parent_seq"
			,path as "path"
			,depthLength as "depthLength"
			,SUBSTR(path,1,LENGTH(path) - LENGTH(id) - 1 ) as "parent_path"
			,CASE WHEN path = concat(#deptPath#,'|') THEN '1' ELSE '0' END AS "selected"
			,CASE WHEN #deptPath# like concat(path,'%') THEN '1' ELSE '0' END AS "opened"
			,orgDiv as "orgDiv"
			,innerReceiveYn as "innerReceiveYn"
			,orgLevel as "orgLevel"
			,orderNum as "orderNum"
			
			from 
			(
				<isEmpty property="parentDeptPath">
				
					select
					c.comp_seq as compSeq
					,c.comp_seq as id
					,c.comp_cd as orgCd
					,nvl(nm_lang.comp_name, nm_kr.comp_name) as orgName
					,'0' as parentSeq
					,concat(c.comp_seq,'|') as path
					,c.comp_seq as depthLength
					,'0' as selected
					,'0' as opened
					,'c' as orgDiv
					,'Y' as innerReceiveYn
					,0 as orgLevel
					,c.order_num as orderNum
					from $DB_NEOS$t_co_comp c
					join $DB_NEOS$t_co_comp_multi nm_kr on nm_kr.lang_code = 'kr' and c.comp_seq = nm_kr.comp_seq and c.use_yn = 'Y'
					<isNotEmpty property="compFilter">
					and c.comp_seq in ($compFilter$)
					</isNotEmpty>				
					left join $DB_NEOS$t_co_comp_multi nm_lang on nm_lang.lang_code = #langCode# and c.comp_seq = nm_lang.comp_seq
					<isNotEmpty property="targetDeptSeq">
					join t_co_dept td on td.dept_seq = #targetDeptSeq# and td.comp_seq = c.comp_seq
					</isNotEmpty>				
	
					union all
				
				</isEmpty>
				
				select
				b.comp_seq as compSeq
				,b.biz_seq as id
				,b.biz_cd as orgCd
				,nvl(nm_lang.biz_name, nm_kr.biz_name) as orgName
				,b.comp_seq as parentSeq
				,b.comp_seq || '|' || b.biz_seq || '|' as path
				,b.comp_seq as depthLength
				,'0' as selected
				,'0' as opened
				,'b' as orgDiv
				,'Y' as innerReceiveYn
				,1 as orgLevel
				,b.order_num as orderNum
				from $DB_NEOS$t_co_biz b
				join $DB_NEOS$t_co_comp c on b.comp_seq = c.comp_seq
				<isNotEmpty property="compFilter">
				and c.comp_seq in ($compFilter$)
				</isNotEmpty>				
				join $DB_NEOS$t_co_biz_multi nm_kr on nm_kr.lang_code = 'kr' and b.biz_seq = nm_kr.biz_seq and c.use_yn = 'Y' and b.use_yn = 'Y' and b.display_yn = 'Y'
				left join $DB_NEOS$t_co_biz_multi nm_lang on nm_lang.lang_code = #langCode# and b.biz_seq = nm_lang.biz_seq
				
				<isNotEmpty property="parentDeptPath">
				<isEqual property="parentDiv" compareValue="c">
				and c.comp_seq = #parentSeq# 
				</isEqual>				
				</isNotEmpty>
				
				<isNotEmpty property="targetDeptSeq">
				join t_co_dept td on td.dept_seq = #targetDeptSeq# and td.biz_seq = b.biz_seq
				</isNotEmpty>
				
				<isEmpty property="bizTree">
				
				union all
				
				select
				d.comp_seq as compSeq
				,d.dept_seq as id
				,d.dept_cd as orgCd
				,nvl(nm_lang.dept_name, nm_kr.dept_name) as orgName
				,case when d.parent_dept_seq != '0' then d.parent_dept_seq when b.display_yn = 'Y' then d.biz_seq else d.comp_seq end  as parentSeq
				,case when b.display_yn = 'Y' then d.comp_seq || '|' || d.biz_seq || '|' || d.path || '|' else d.comp_seq || '|' || d.path || '|' end as path
				,d.comp_seq as depthLength
				,'0' as selected
				,'0' as opened
				,'d' as orgDiv
				,'Y' as innerReceiveYn
				,case when b.display_yn = 'Y' then d.dept_level + 1 else d.dept_level end as orgLevel
				,d.order_num as orderNum
				from $DB_NEOS$t_co_dept d
				join $DB_NEOS$t_co_comp c on d.comp_seq = c.comp_seq
				<isNotEmpty property="compFilter">
				and c.comp_seq in ($compFilter$)
				</isNotEmpty>
				<isEmpty property="eaYn">
				and nvl(d.ea_yn,'N') != 'Y'
				</isEmpty>
				join $DB_NEOS$t_co_biz b on d.biz_seq = b.biz_seq
				join $DB_NEOS$t_co_dept_multi nm_kr on nm_kr.lang_code = 'kr' and d.dept_seq = nm_kr.dept_seq
				and c.use_yn = 'Y' and b.use_yn = 'Y' and d.use_yn = 'Y'
				left join $DB_NEOS$t_co_dept_multi nm_lang on nm_lang.lang_code = #langCode# and d.dept_seq = nm_lang.dept_seq
				<isNotEmpty property="targetDeptSeq">
				join t_co_dept td on td.dept_seq = #targetDeptSeq# and '|' || td.path || '|' like '%|' || d.dept_seq || '|%'
				</isNotEmpty>				
				
				</isEmpty>				
				
			) result
			
			where 1=1
			
			<isNotEmpty property="parentDeptPath">
					and SUBSTR(path,1,LENGTH(path) - LENGTH(id) - 1 ) like concat(#parentDeptPath#, '|%')
					and orgLevel <![CDATA[<]]> #parentDeptLevel#
			</isNotEmpty>
			
			<isEmpty property="parentDeptPath">
				
				<isEqual property="partYn" compareValue="Y">
				
					<isNotEmpty property="deptPath">
					
					and ((
						orgLevel <![CDATA[>]]> 1 and concat(#deptPath#, '|') like substr(path,0,instr(path,'|',-1,3)) || '%'
					) or (
						orgLevel <![CDATA[<]]> 2 and concat(#deptPath#, '|') like concat(SUBSTR(path,1,LENGTH(path) - LENGTH(id) - 1 ), '%')
					))
					
					</isNotEmpty>
					
				</isEqual>
	
				<isEmpty property="compFilter">
				and (
					compSeq IN (
						SELECT	DISTINCT 
						IGC.comp_seq 
						FROM 	(
							SELECT	c1.comp_seq
							FROM	$DB_NEOS$t_co_emp_comp c1
							join	$DB_NEOS$t_co_emp_dept d1 on c1.dept_seq = d1.dept_seq and c1.emp_seq = d1.emp_seq
							WHERE 	c1.emp_seq = #empSeq#
							AND 	c1.use_yn			= 'Y'
							AND     c1.work_status = '999'
							AND 	d1.ea_display_yn = 'N'
						)	IUC
							INNER JOIN 	(
								SELECT	GC.comp_seq as user_comp_seq
									, GC.groupping_seq as groupping_seq
									, AG.comp_seq as comp_seq
								FROM	$DB_NEOS$t_co_groupping_comp	GC
									INNER JOIN	$DB_NEOS$t_co_groupping_comp	AG
									ON 	GC.groupping_seq = AG.groupping_seq	
								WHERE	GC.use_yn	= 'Y'
								AND	AG.use_yn	= 'Y'
							)	IGC
							ON	IUC.comp_seq = IGC.user_comp_seq
						UNION
						SELECT	c1.comp_seq
						FROM	$DB_NEOS$t_co_emp_comp c1
						join 	$DB_NEOS$t_co_emp_dept d1 on c1.dept_seq = d1.dept_seq and c1.emp_seq = d1.emp_seq
						WHERE 	c1.emp_seq = #empSeq#
						AND 	c1.use_yn			= 'Y'
						AND     c1.work_status = '999'
						AND 	d1.ea_display_yn = 'N'
					)
					<isEqual property="userSe" compareValue="MASTER">
					OR
					#empSeq# IN (
						SELECT DISTINCT
								emp_seq 
						FROM	$DB_NEOS$t_co_emp_option 
						WHERE 	master_use_yn = 'Y'
					)
					</isEqual>
					<isEqual property="isAllCompShow" compareValue="true">
					OR
					compSeq IN (
						select DISTINCT
								comp_seq
						from $DB_NEOS$t_co_comp
						WHERE use_yn = 'Y'
					)						
					</isEqual>
				)
				</isEmpty>
			
			</isEmpty>
			
			order by orgLevel, "parent_path", orderNum, orgCd
  		
   		</select>      		
   		
   		
   		
   		<select id="OrgChart.selectOrgFullListAdmin" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
			SELECT	ORG.seq 					AS "id"
				, NVL(ORG.org_cd, ' ') as "orgCd"
				, ORG.gbn_org 					AS "gbnOrg"
				, ORG.comp_seq					AS "compSeq"
				, ORG.biz_seq					AS "bizSeq"
				, NVL(NVL(NVL($DB_NEOS$FN_GetMultiLang(#langCode#,comp.comp_name_multi), $DB_NEOS$FN_GetMultiLang(#langCode#,dept.dept_name_multi)), $DB_NEOS$FN_GetMultiLang(#langCode#, biz.biz_name_multi)),' ') 	AS "text"
				, NVL(parent_seq,'0') 					AS "parent_seq"
				, NVL(path,' ')					AS "path"
				, SUBSTR(ORG.path,1,LENGTH(ORG.path)-1 - LENGTH(ORG.seq))	AS "parent_path"
				, ORG.team_yn					AS "team_yn"
				, CASE WHEN path  = #deptPath#	THEN '1' ELSE '0'  END 			AS "selected"
				, CASE WHEN #deptPath# LIKE CONCAT(path,'%')	THEN '1' ELSE '0'  END 	AS "opened"
				, ORG.gbn_org	AS	"orgDiv"
				, ORG.use_yn AS	"use_yn"
				, ORG.team_yn AS	"team_yn"
				, ORG.vir_dept_yn AS	"vir_dept_yn"
				, ORG.org_cd AS	"org_cd"
			FROM	(
				SELECT 	* 
				<isNotEmpty property="bizDisplayYn">
					<isEqual property="bizDisplayYn" compareValue="N">
						FROM 	$DB_NEOS$v_org_chart_dept_admin
					</isEqual>
					<isEqual property="bizDisplayYn" compareValue="Y">
						FROM 	$DB_NEOS$v_org_chart_deptbiz_admin
					</isEqual>
				</isNotEmpty>
				<isEmpty property="bizDisplayYn">
					FROM 	$DB_NEOS$v_org_chart_admin_temp
				</isEmpty>				
				WHERE 	group_seq = #groupSeq#
				AND 'Y'=(CASE WHEN gbn_org = 'c' THEN use_yn ELSE 'Y' END) <!-- 회사조회시 useYn = Y , 부서조회시 useYn = All -->
				<isNotEmpty property="compSeq">
				AND comp_seq = #compSeq#
				</isNotEmpty>
				<isEqual property="useYn" compareValue="Y">
				AND use_yn = #useYn#
				</isEqual>
				<isNotEmpty property="eaYn">
				and ea_yn = #eaYn#
				</isNotEmpty>
			)	ORG
				LEFT JOIN	$DB_NEOS$v_t_co_comp_multi	COMP
				ON		ORG.gbn_org = 'c'
					AND	ORG.seq = COMP.comp_seq
					AND	COMP.group_seq = ORG.group_seq
				LEFT JOIN	$DB_NEOS$v_t_co_dept_multi	DEPT
				ON		ORG.gbn_org = 'd'
					AND	ORG.seq = DEPT.dept_seq
					AND	DEPT.group_seq = ORG.group_seq
				LEFT JOIN	$DB_NEOS$v_t_co_biz_multi	BIZ
				ON		ORG.gbn_org = 'b'
					AND	ORG.seq = BIZ.biz_seq
					AND	BIZ.group_seq = ORG.group_seq
				LEFT JOIN $DB_NEOS$t_co_Biz	cb
				on	ORG.biz_Seq = cb.biz_seq
			ORDER BY cb.order_num, (CASE WHEN ORG.seq = ORG.path THEN '0' ELSE SUBSTR(ORG.path,1,LENGTH(ORG.path) - LENGTH(ORG.seq)) END ), ORG.order_num, ORG.org_Cd
   		</select>
   		
   		<insert id="OrgChart.insertDeptBatch" parameterClass="hashmap">
   			/* OrgChart.insertDeptBatch - oracle */
			INSERT INTO $DB_NEOS$t_co_dept_batch 
			(
				 batch_seq  
		       , seq 
		       , group_seq  
		       , comp_seq 
		       , parent_dept_seq  
		       , dept_seq 
		       , dept_name  
		       , dept_name_en  
		       , dept_name_jp  
		       , dept_name_cn  
		       , dept_type  
		       , dept_path  
		       , create_seq   
		       , create_date
		       , batch_ret
		       , biz_seq 
			)
			VALUES
			(
				#batchSeq#  
		      , #seq# 
		      , #groupSeq#  
		      , #compSeq#  
		      , #parentDeptSeq#  
		      , #deptSeq#  
		      , #deptName#  
		      , #deptNameEn#  
		      , #deptNameJp#  
		      , #deptNameCn#  
		      , #deptType#  
		      , #deptPath#  
		      , #createSeq#  
		      , SYSDATE 
		      , ''
		      , #compSeq#
			)
		</insert>
		
		
		<select id="OrgChart.selectOrgBatchPreviewList" parameterClass="java.util.HashMap" resultClass="java.util.HashMap">
   			/* OrgChart.selectOrgBatchPreviewList - Oracle(시스템설정 > 조직도정보관리  미리보기 Tree) */
   			
   			SELECT ORG.id          AS "id"
			     , ORG.gbnOrg      AS "gbnOrg"
			     , ORG.compSeq     AS "compSeq"
			     , ORG.bizSeq      AS "bizSeq"
			     , ORG.text		   AS "text"		
			     , ORG.parent_seq  AS "parent_seq"
			     , ORG.path        AS "path"
			     , ORG.parent_path AS "parent_path"
			     , ORG.team_yn     AS "team_yn"
			     , ORG.selected    AS "selected"
			     , ORG.opened      AS "opened"
			     , ORG.orgDiv      AS "orgDiv"
			     , ORG.order_num   AS "order_num"
			     , ORG.batchSeq    AS "batchSeq"
			     , ORG.use_yn	   AS "use_yn"			
			     , ORG.vir_dept_yn AS "vir_dept_yn"
			  FROM (
				SELECT	ORG.seq 					AS id
					, ORG.gbn_org 					AS gbnOrg
					, ORG.comp_seq					AS compSeq
					, ORG.biz_seq					AS bizSeq
					, NVL(NVL(NVL($DB_NEOS$FN_GetMultiLang(#langCode#,comp.comp_name_multi), $DB_NEOS$FN_GetMultiLang(#langCode#,dept.dept_name_multi)),$DB_NEOS$FN_GetMultiLang(#langCode#,biz.biz_name_multi)),'') 	AS text					
					, NVL(parent_seq,0) 					AS parent_seq
					, NVL(path,'')					AS path
					, case when instr(ORG.path,'|') = 0 then '0' else replace(ORG.path || '▦', '|' || ORG.seq || '▦', '') end AS parent_path
					, ORG.team_yn					AS team_yn
					, CASE WHEN path  = #deptPath#	THEN '1' ELSE '0'  END 			AS selected
					, CASE WHEN '' LIKE path || '%'	THEN '1' ELSE '0'  END 	AS opened
					, ORG.gbn_org						AS	orgDiv
					, TO_CHAR(ORG.order_num) AS order_num
					, '' batchSeq
					, ORG.use_yn					
					, ORG.vir_dept_yn
				FROM	(
					SELECT 	* 
					FROM 	$DB_NEOS$v_org_chart_admin_temp
					WHERE 	group_seq = #groupSeq#
					AND 'Y'=(CASE WHEN gbn_org = 'c' THEN use_yn ELSE 'Y' END) <!-- 회사조회시 useYn = Y , 부서조회시 useYn = All -->
					<isNotEmpty property="compSeq">
					AND comp_seq = #compSeq#
					</isNotEmpty>
				)	ORG
					LEFT JOIN	$DB_NEOS$v_t_co_comp_multi	COMP
					ON		ORG.gbn_org = 'c'
						AND	ORG.seq = COMP.comp_seq
						AND	COMP.group_seq = ORG.group_seq
					LEFT JOIN	$DB_NEOS$v_t_co_dept_multi	DEPT
					ON		ORG.gbn_org = 'd'
						AND	ORG.seq = DEPT.dept_seq
						AND	DEPT.group_seq = ORG.group_seq
					LEFT JOIN	$DB_NEOS$v_t_co_biz_multi	BIZ
					ON		ORG.gbn_org = 'b'
						AND	ORG.seq = BIZ.biz_seq
						AND	BIZ.group_seq = ORG.group_seq
				UNION
				
				
				SELECT 
					a.dept_seq id
					,case when a.biz_seq = a.dept_seq then 'b' else 'd' end gbnOrg
					,a.comp_seq compSeq
					,case when a.biz_seq = a.comp_seq then a.comp_seq else a.biz_seq end as bizSeq
					,dept_name text
					,DECODE(a.dept_seq, parent_dept_seq, a.comp_seq, parent_dept_seq) parent_seq
					,case when a.comp_seq = a.biz_seq then a.comp_seq || '|' || a.biz_seq || '|' || dept_path
					  else a.comp_seq || '|' || dept_path end path
					,case when a.comp_seq = a.biz_seq then replace(a.comp_seq || '|' || a.biz_seq || '|' || a.dept_path, '|' || a.dept_seq, '')  
					else replace(a.comp_seq || '|' || a.dept_path, '|' || a.dept_seq, '') end
					, CASE WHEN dept_type = '팀' THEN 'Y' ELSE 'N' END team_yn
					,'0' selected
					,'0' opened
					,case when a.biz_seq = a.dept_seq then 'b' else 'd' end orgDiv
					, seq order_num
					, #retKey# batchSeq
					, 'Y' use_yn					
					, CASE WHEN dept_type = '임시' THEN 'Y' ELSE 'N' END vir_dept_yn
				FROM
					(
						SELECT 
							A.*
							,CASE WHEN A.dept_type='사업장' THEN B.biz_seq ELSE null END check_biz_seq						
						FROM $DB_NEOS$t_co_dept_batch A
						LEFT JOIN $DB_NEOS$t_co_biz B on A.dept_seq = B.biz_cd
						WHERE batch_seq = #retKey#
					) a
				LEFT JOIN
					(
						SELECT COUNT(a.dept_seq) check_dept_seq
							 , a.dept_seq
                             , MIN(b.path) KEEP (DENSE_RANK FIRST ORDER BY a.dept_seq) AS path
                            , MIN(b.dept_seq) KEEP (DENSE_RANK FIRST ORDER BY a.dept_seq) AS check_ori_dept_seq
						FROM $DB_NEOS$t_co_dept_batch a
						LEFT JOIN
							$DB_NEOS$t_co_dept b
						ON
							a.dept_seq = b.dept_cd
						WHERE
							batch_seq = #retKey#
						GROUP BY a.dept_seq
					) b on a.dept_seq = b.dept_seq
				LEFT JOIN
					(
						SELECT 
							COUNT(dept_seq) check_parent_dept_seq
							,dept_seq
						FROM $DB_NEOS$t_co_dept_batch
						WHERE
							batch_seq = #retKey# 
						GROUP BY  dept_seq					
					)c on a.parent_dept_seq = c.dept_seq
				LEFT JOIN
					(
						SELECT 
							COUNT(dept_seq) check_dept_seq_batch
							,dept_seq
						FROM $DB_NEOS$t_co_dept_batch
						WHERE
							batch_seq = #retKey#
						GROUP BY  dept_seq					
					)d on a.dept_seq = d.dept_seq	
				LEFT JOIN
					(
						SELECT 
							COUNT(b.comp_seq) check_comp_seq
							,b.comp_seq
						FROM $DB_NEOS$t_co_dept_batch a
						left join $DB_NEOS$t_co_comp b on a.comp_seq = b.comp_seq
						WHERE
							batch_seq = #retKey#			
						GROUP BY b.comp_seq	
					)e on a.comp_seq = e.comp_seq	
					
				where c.check_parent_dept_seq = 1 
				  and b.check_ori_dept_seq is null 
				  and d.check_dept_seq_batch = 1 
				  and (e.check_comp_seq is not null or e.check_comp_seq != '0') 
				  and a.check_biz_seq is null and (dept_name is not null or dept_name != ' ') 
				  and CASE WHEN b.check_ori_dept_seq is not null 
                            AND a.dept_path = b.path THEN '1' ELSE '0' END = 0	
						
			) ORG			
					
					
			ORDER BY (CASE WHEN ORG.id = ORG.path THEN '0' ELSE REPLACE(REPLACE(ORG.path,'|', '/'),ORG.id,'') END ), ORG.order_num
   		</select>
   		
   		
   		<select id="OrgChart.getUserInfoList" parameterClass="hashmap" resultClass="egovMap">
   		/* OrgChart.getUserInfoList - oracle */
   			select 
				NVL(v.comp_name,' ') comp_name
				,NVL(REPLACE(v.path_name, '|', '>'),'') dept_name
				,NVL($DB_NEOS$get_emp_duty_position_name(v.group_seq, v.comp_seq, v.dept_position_code, 'POSITION', #langCode#),' ') dept_position_code
				,NVL($DB_NEOS$get_emp_duty_position_name(v.group_seq, v.comp_seq, v.dept_duty_code, 'DUTY', #langCode#),' ') dept_duty_code
				,NVL((v.emp_name || '(' || v.login_id || ')'),' ') emp_name
				,NVL(v.tel_num,' ') tel_num
				,NVL(v.mobile_tel_num,' ') mobile_tel_num
				,NVL(v.fax_num,' ') fax_num
				,NVL((v.email_addr || '@' || v.email_domain),' ') email_addr
				,NVL((v.out_mail || '@' || v.out_domain),'') personal_addr
				<isNotEmpty property="cmmOption2200">
					<isEqual property="cmmOption2200" compareValue="1">
						,substr(NVL(v.bday,' '),6) bday
					</isEqual>
					<isEqual property="cmmOption2200" compareValue="0">
						,NVL(v.bday,' ') bday
					</isEqual>
				</isNotEmpty>
				<isEmpty property="cmmOption2200">
					,NVL(v.bday,' ') bday
				</isEmpty>				
				,NVL(v.main_work,' ') main_work		
				,(NVL(v.addr,'') || ' ' || NVL(v.detail_addr,' ')) addr
				from $DB_NEOS$v_user_info v
			where comp_seq in 
			<isNotEqual property="userSe" compareValue="MASTER">
				(SELECT	DISTINCT 
				IGC.comp_seq 
				FROM 	(
					SELECT	*
					FROM	$DB_NEOS$v_user_info
					WHERE 	emp_seq = #empSeq#
					-- AND		orgchart_display_yn	= 'Y'
					AND 	use_yn			= 'Y'
					AND     work_status = '999'
				)	IUC
					INNER JOIN 	(
						SELECT	GC.comp_seq	as user_comp_seq
							, GC.groupping_seq as groupping_seq
							, AG.comp_seq as comp_seq
						FROM	$DB_NEOS$t_co_groupping_comp	GC
							INNER JOIN	$DB_NEOS$t_co_groupping_comp	AG
							ON 	GC.groupping_seq = AG.groupping_seq	
						WHERE	GC.use_yn	= 'Y'
						AND	AG.use_yn	= 'Y'
					)	IGC
					ON	IUC.comp_seq = IGC.user_comp_seq
				UNION
				SELECT	comp_seq
				FROM	$DB_NEOS$v_user_info
				WHERE 	emp_seq = #empSeq#
				-- AND		orgchart_display_yn	= 'Y'
				AND 	use_yn			= 'Y'
				AND     work_status = '999')
			</isNotEqual>
			<isEqual property="userSe" compareValue="MASTER">
				(SELECT comp_seq 
					from $DB_NEOS$t_co_comp
					where use_yn = 'Y'
				)				
			</isEqual>
			<isEqual property="userSe" compareValue="MASTER">
			and v.work_status = '999'
			</isEqual>
			<isEqual property="selectExcelRange" compareValue="myComp">
			and v.comp_Seq = #compSeq#
			</isEqual>
			and v.group_seq = #groupSeq#
			and v.use_yn = 'Y'
			AND v.e_use_yn = 'Y'
			AND v.ed_use_yn = 'Y'
			AND v.emd_use_yn = 'Y'
			AND v.cm_use_yn = 'Y'
			AND v.dm_use_yn = 'Y'
			<isEmpty property="eaYn">
			AND		v.orgchart_display_yn = 'Y'
			AND 	v.ea_display_yn = 'N'
			</isEmpty>			
			<isNotEmpty property="eaYn">
			AND		(v.orgchart_display_yn = 'Y' or v.ea_display_yn = 'Y')			
			</isNotEmpty>	
			order  by v.comp_name, path_name
   		</select>
   		
   		<select id="OrgChart.getUserFormList" parameterClass="hashmap" resultClass="egovMap">
   			/* OrgChart.getUserFormList - oracle */
   			
			select
			TO_CHAR(rownum) AS row_num,
			login_id,
			emp_name,
			' ' AS file_name
			from
			(
			  select
			  login_id,
			  emp_name 
			  from 
			  (
			    select distinct
			    e.login_id,
			    $DB_NEOS$fn_getMultiLang(#langCode#, em.emp_name_multi) as emp_name
			    from $DB_NEOS$t_co_emp e
			    join $DB_NEOS$v_t_co_emp_multi em on e.emp_seq = em.emp_seq
			    join $DB_NEOS$t_co_emp_comp ec on e.use_yn != 'D' and e.emp_seq = ec.emp_seq and ec.work_status != '001'
				<isNotEmpty property="compSeq">
				where ec.comp_seq = #compSeq#
				</isNotEmpty>	
				order by emp_name		    
			  ) result1
			  where rownum <![CDATA[<=]]> 100000000
			) result2
				
   		</select>   		
   		
   		<select id="OrgChart.getSelectedAddrList" parameterClass="hashMap" resultClass="egovMap">
   		/* OrgChart.getSelectedAddrList - oracle */
   			SELECT
   				*
   			FROM
   				$DB_NEOS$T_TMPG_ADDR
   			WHERE
   				addr_seq IN ($selectedAddrList$)
   		</select>
   		
   		
   		<select id="OrgChart.getSelectedOrgList" parameterClass="hashMap" resultClass="egovMap">
   		/* OrgChart.getSelectedOrgList - oracle */
   			SELECT
   				*
   			FROM
   				$DB_NEOS$v_user_info
   			WHERE
   				group_seq = #groupSeq# and comp_seq = #compSeq# and dept_seq = #deptSeq# and emp_seq = #empSeq#
   		</select>
   		
   		
   		<update id="OrgChart.setDeptBizBatch" parameterClass="hashMap">
   			/* OrgChart.setDeptBizBatch - oracle */
			MERGE INTO $DB_NEOS$t_co_dept_batch a
			USING (
					SELECT	
					batch_seq,
					dept_seq,
					parent_dept_seq,
					
					(SELECT	
						(
							CASE WHEN dept_type = '사업장' THEN dept_seq 
							ELSE comp_seq END
						)
					FROM	$DB_NEOS$t_co_dept_batch sub
					WHERE 	INSTR( dept_path, '|' ) = 0 AND ( org.dept_path LIKE sub.dept_path || '|%' OR org.dept_path = sub.dept_path) AND sub.batch_seq = #retKey#
					  AND   ROWNUM = 1
					) AS biz_seq,					
					(SELECT	
						(
							CASE WHEN dept_type = '사업장' THEN org.dept_path
							ELSE org.dept_path END
						)
					FROM	$DB_NEOS$t_co_dept_batch sub
					WHERE 	INSTR( dept_path, '|' ) = 0 AND ( org.dept_path LIKE sub.dept_path || '|%' OR org.dept_path = sub.dept_path) AND sub.batch_seq = #retKey#
					  AND   ROWNUM = 1
					) AS set_dept_path,
					
					CASE WHEN instr(
						(SELECT	
							(
								CASE WHEN dept_type = '사업장' THEN replace(org.dept_path, dept_seq || '|', '')
								ELSE org.dept_path END
							)
						FROM	$DB_NEOS$t_co_dept_batch sub
						WHERE 	INSTR( dept_path, '|' ) = 0 AND ( org.dept_path LIKE sub.dept_path || '|%' OR org.dept_path = sub.dept_path) AND sub.batch_seq = #retKey#
						  AND   ROWNUM = 1
						), '|') = 0 THEN org.dept_seq ELSE 
				
					CASE WHEN				
						(LENGTH(
							(SELECT	
								(
									CASE WHEN dept_type = '사업장' THEN replace(org.dept_path, dept_seq || '|', '')
									ELSE org.dept_path END
								)
							FROM	$DB_NEOS$t_co_dept_batch sub
							WHERE	INSTR( dept_path, '|' ) = 0 AND ( org.dept_path LIKE sub.dept_path || '|%' OR org.dept_path = sub.dept_path) AND sub.batch_seq = #retKey#
						      AND   ROWNUM = 1
							)
						) -
				 		LENGTH(
				 			REPLACE(
				 				(SELECT	
									(
										CASE WHEN dept_type = '사업장' THEN replace(org.dept_path, dept_seq || '|', '')
										ELSE org.dept_path END
									)
								FROM	$DB_NEOS$t_co_dept_batch sub
								WHERE 	INSTR( dept_path, '|' ) = 0 AND ( org.dept_path LIKE sub.dept_path || '|%' OR org.dept_path = sub.dept_path) AND sub.batch_seq = #retKey#
							      AND   ROWNUM = 1
								), '|', '')
								)
						) / LENGTH('|') > 1 THEN  ORG.parent_dept_seq 
						ELSE 
						SUBSTR(
							(SELECT	
								(
									CASE WHEN dept_type = '사업장' THEN replace(org.dept_path, dept_seq || '|', '')
									ELSE org.dept_path END
								)
								FROM	$DB_NEOS$t_co_dept_batch sub
								WHERE 	INSTR( dept_path, '|' ) = 0 AND ( org.dept_path LIKE sub.dept_path || '|%' OR org.dept_path = sub.dept_path) AND sub.batch_seq = #retKey#
								  AND   ROWNUM = 1
							),
							INSTR(
									(SELECT	
										(
											CASE WHEN dept_type = '사업장' THEN replace(org.dept_path, dept_seq || '|', '')
											ELSE org.dept_path END
										)
										FROM	$DB_NEOS$t_co_dept_batch sub
										WHERE 	INSTR( dept_path, '|' ) = 0 AND ( org.dept_path LIKE sub.dept_path || '|%' OR org.dept_path = sub.dept_path) AND sub.batch_seq = #retKey#
										  AND   ROWNUM = 1
									),'|')-1)		
						
						END
					end set_parent_dept_seq
					FROM	$DB_NEOS$t_co_dept_batch  	org
					wHERE 	batch_seq = #retKey#
				  ) orgTbl
		       ON (a.batch_seq = orgTbl.batch_seq 
		      AND  a.dept_seq = orgTbl.dept_seq)
             WHEN MATCHED THEN
                   UPDATE SET a.biz_seq = orgTbl.biz_seq
                            , a.parent_dept_seq = orgTbl.set_parent_dept_seq
                            , a.dept_path = orgTbl.set_dept_path
                    WHERE a.batch_seq = #retKey#
			
   		</update>
   		
   		
   		<select id="OrgChart.getMainDeptYn" parameterClass="hashMap" resultClass="egovMap">
   			/* OrgChart.getMainDeptYn - oracle */
   			select
   				main_dept_yn
   			from
   				$DB_NEOS$t_co_emp_dept
   			where
   				dept_seq = #deptSeq# AND
   				emp_seq = #empSeq#   				
   		</select>
   		
   		<select id="OrgChart.selectBizProfileList" parameterClass="hashmap" resultClass="egovMap">
			/* sqlmap/mysql/neos/cmm/systemx/OrgChart_SQL.xml - OrgChart.selectBizProfileList   */
			/* 하위 사업장 리스트 검색 */
			SELECT	 A.group_seq		"groupSeq"
				, A.comp_seq		"compSeq"
				, A.dept_seq		"deptSeq"
				, ' '	AS		"empSeq"
				, parent_dept_seq	"parentDeptSeq"
				, $DB_NEOS$FN_GetMultiLang(#langCode#,comp_name_multi)	"compName"	
				, $DB_NEOS$FN_GetMultiLang(#langCode#,biz_name_multi)	"deptName"	
				, ' '	AS		"empName"
				, NVL(path_name,' ') as	"pathName"		
				, path			"deptPath"
				, ' '	AS 		"dutyName"
				, ' '	AS 		"positionName"
				, ' '	AS		"dutyCode"
				, ' '	AS		"positionCode"
				, gbn_org AS 		"empDeptFlag"
				, (A.group_seq || '|' || A.comp_seq || '|' || A.dept_seq || '|' || '0|' || gbn_org)	"superKey"
				, ea_yn 
			FROM	(
				SELECT 	(CASE gbn_org WHEN 'c' THEN '0' ELSE seq END ) as dept_seq
					, group_seq
					, comp_seq
					, biz_seq
					, parent_seq as parent_dept_seq
					, path
					, gbn_org
					, ea_yn
				FROM 	$DB_NEOS$v_org_chart
				WHERE 	group_seq	= #groupSeq#
				<isNotEqual property="isCheckAllDeptEmpShow" compareValue="true">
				AND 	(( CASE parent_seq WHEN '0' THEN comp_seq ELSE parent_seq END )= #selectedId# OR seq = #selectedId#)
				</isNotEqual>
				<isEqual property="orgGubun" compareValue="c">
				OR (comp_seq = #selectedId# AND parent_gbn='b')
				</isEqual>
			)	A
				LEFT JOIN $DB_NEOS$v_t_co_dept_multi	B
				ON		A.dept_seq	= B.dept_seq
					AND	A.group_seq	= B.group_seq
					AND	A.comp_seq	= B.comp_seq
					AND	A.biz_seq	= B.biz_seq
					AND	B.use_yn	= 'Y'
				LEFT JOIN $DB_NEOS$v_t_co_comp_multi	C
				ON		A.comp_seq	= C.comp_seq
				LEFT JOIN $DB_NEOS$v_t_co_biz_multi      D
				ON		A.biz_seq  	= D.biz_seq
					AND	A.group_Seq	= D.group_seq
					AND	A.comp_seq	= D.comp_seq
					AND	D.use_yn	= 'Y'
			<isEqual property="orgGubun" compareValue="c">
			WHERE	A.comp_seq = #selectedId# AND (gbn_org = 'b' OR gbn_org = 'c')
			</isEqual>
			<isEqual property="orgGubun" compareValue="b">
			WHERE   gbn_org = 'b'
			</isEqual>
			<isEqual property="baseBiz" compareValue="Y">
			AND 	A.comp_seq = A.biz_seq
			</isEqual>
   		</select>
   		
   		<select id="OrgChart.selectFilterdBizProfileList" parameterClass="hashmap" resultClass="egovMap">
   			/* OrgChart.selectFilterdBizProfileList - oracle */
   			/* 사업장 리스트 검색 - 필터링*/
			SELECT	 A.group_seq		"groupSeq"
				, A.comp_seq		"compSeq"
				, A.dept_seq		"deptSeq"
				, ' '	AS		"empSeq"
				, parent_dept_seq as "parentDeptSeq"
				
				, $DB_NEOS$FN_GetMultiLang(#langCode#,comp_name_multi) as "compName"	
				, $DB_NEOS$FN_GetMultiLang(#langCode#,biz_name_multi) as "deptName"	
				, ' '	AS "empName"
				, (A.comp_seq || '|' || path) as "deptPath"
				, ' '	AS "dutyName"
				, ' '	AS "positionName"
				, ' '	AS	"dutyCode"
				, ''	AS	"positionCode"
				
				, gbn_org 	AS 	"empDeptFlag"
				, (A.group_seq || '|' || A.comp_seq || '|' || A.dept_seq || '|' || '0|' || gbn_org) as "superKey"
			FROM	(
				SELECT 	(CASE gbn_org WHEN 'c' THEN '0' ELSE seq END ) as dept_seq
					, group_seq
					, comp_seq
					, biz_seq
					, parent_seq as parent_dept_seq
					, path
					, gbn_org
				FROM 	$DB_NEOS$v_org_chart
				WHERE 	group_seq	= #groupSeq#   AND  gbn_org = 'b'
			)	A
				INNER JOIN $DB_NEOS$v_t_co_biz_multi	B
				ON		A.group_seq	= B.group_seq
					AND	A.comp_seq	= B.comp_seq
					AND	A.biz_seq	= B.biz_seq
					AND	B.use_yn	= 'Y'
					AND	biz_name	LIKE	'%$filter$%'
				INNER JOIN $DB_NEOS$v_t_co_comp_multi	C
				ON		A.comp_seq	= C.comp_seq
				<isNotEmpty property="compFilter">
				AND A.comp_seq in ($compFilter$)
				</isNotEmpty>
   		</select>
   		
   		<select id="OrgChart.selectedBizProfileList" parameterClass="hashmap" resultClass="egovMap">
			/* sqlmap/mysql/neos/cmm/systemx/OrgChart_SQL.xml - OrgChart.selectedBizProfileList  */
			/* 부서 소속 사용자와 부서 리스트 검색 */
			SELECT	 
				A.group_seq		"groupSeq"
				, A.comp_seq		"compSeq"	
				, A.dept_seq		"deptSeq"
				, ' ' AS 		"empSeq"
				, parent_dept_seq	"parentDeptSeq"
				
				, $DB_NEOS$FN_GetMultiLang(#langCode#,comp_name_multi)	"compName"
				, $DB_NEOS$FN_GetMultiLang(#langCode#,biz_name_multi)	"deptName"
				, ' ' AS 		"empName"
				, path			"deptPath"
				, ' '	AS "dutyName"
				, ' '	AS "positionName"
				, ' '	AS	"dutyCode"
				, ' '	AS	"positionCode"
				
				, gbn_org AS 		"empDeptFlag"
				, (A.group_seq || '|' || A.comp_seq || '|' || A.dept_seq || '|0|' || gbn_org) as "superKey"
			FROM	(
				SELECT 	(CASE gbn_org WHEN 'c' THEN '0' ELSE seq END ) as dept_seq
					, group_seq
					, comp_seq
					, biz_seq
					, parent_seq as	parent_dept_seq
					, path
					, gbn_org
				FROM 	$DB_NEOS$v_org_chart
				WHERE 	(
					(1 = 2)
					$whereClause_biz$ 
				)
			)	A
				LEFT JOIN $DB_NEOS$v_t_co_biz_multi	B
				ON		A.group_seq	= B.group_seq
					AND	A.comp_seq	= B.comp_seq
					AND	A.biz_seq	= B.biz_seq
					AND	B.use_yn	= 'Y'
				INNER JOIN $DB_NEOS$v_t_co_comp_multi	C
				ON		A.comp_seq	= C.comp_seq
				
   		</select>
   		
   		<select id="OrgChart.getGrouppingCompArray" parameterClass="hashMap" resultClass="egovMap">
   			/* OrgChart.getGrouppingCompArray - oracle */
   			
			select NVL(LISTAGG(b.comp_seq,',') WITHIN GROUP(ORDER BY b.comp_seq), ' ') as comp_filter,
			$DB_NEOS$FN_GetLanguageName(#langCode#, 
                            max(a.groupping_name) KEEP (DENSE_RANK FIRST ORDER BY b.comp_seq DESC), 
                            max(a.groupping_name_en) KEEP (DENSE_RANK FIRST ORDER BY b.comp_seq DESC), 
                            max(a.groupping_name_jp) KEEP (DENSE_RANK FIRST ORDER BY b.comp_seq DESC), 
                            max(a.groupping_name_cn) KEEP (DENSE_RANK FIRST ORDER BY b.comp_seq DESC)) 
                            as emp_uniq_group_name
			from $DB_NEOS$t_co_groupping a
	  		inner join $DB_NEOS$t_co_groupping_comp b 
	  		on a.groupping_seq = b.groupping_seq and b.use_yn = 'Y'
			where a.groupping_seq = #grouppingSeq#
   		</select>
   		
   		<select id="OrgChart.getAllCompArray" parameterClass="hashMap" resultClass="egovMap">
   			/* OrgChart.getAllCompArray - oracle */
   			
			select NVL(LISTAGG(c.comp_seq,',') WITHIN GROUP(ORDER BY c.comp_seq), ' ') as comp_filter,
			g.group_name as emp_uniq_group_name
			from $DB_NEOS$t_co_group g
	  		inner join $DB_NEOS$t_co_comp c 
			on g.group_seq = c.group_seq and c.use_yn = 'Y'
	    	group by g.group_name			
   		</select>   		
   		
   		<select id="OrgChart.getGrouppingName" parameterClass="hashMap" resultClass="String">
   			/* OrgChart.getGrouppingName - oracle */
   		
			<isNotEmpty property="grouppingSeq">
				select
				$DB_NEOS$FN_GetLanguageName(#langCode#, a.groupping_name, a.groupping_name_en, a.groupping_name_jp, a.groupping_name_cn) as emp_uniq_group_name
				from $DB_NEOS$t_co_groupping a 
				where a.groupping_seq=#grouppingSeq#			
			</isNotEmpty>
   		
			<isNotEmpty property="grouppingCompSeq">
				select
				$DB_NEOS$FN_GetMultiLang(#langCode#,comp_name_multi) as emp_uniq_group_name
				from $DB_NEOS$v_t_co_comp_multi
				where comp_seq=#grouppingCompSeq#						
			</isNotEmpty>   		

   		</select>   		
   		
   		<select id="OrgChart.getGrouppingCompList" parameterClass="hashMap" resultClass="egovMap">
   			/* OrgChart.getGrouppingCompList - oracle */
   			
			select
			NVL(emp_uniq_group,' ') as emp_uniq_group,
			NVL(emp_uniq_group_name,' ') as emp_uniq_group_name,
			NVL(comp_seq_str,'_') as comp_seq_str,
			NVL(comp_name_str,' ') as comp_name_str
			from 
			(
			  select
			  concat('G|',a.groupping_seq) as emp_uniq_group,
			  $DB_NEOS$FN_GetLanguageName(#langCode#, a.groupping_name, a.groupping_name_en, a.groupping_name_jp, a.groupping_name_cn) as emp_uniq_group_name,
			  (
			    select LISTAGG(replace(cc.comp_seq,',','/'), ',') WITHIN GROUP(ORDER BY replace(cm.comp_seq,',','/')) 
			    from t_co_groupping_comp gc
			    join $DB_NEOS$t_co_comp cc on gc.comp_seq = cc.comp_seq and cc.use_yn = 'Y'
			    where gc.groupping_seq = a.groupping_seq
			  ) as comp_seq_str,
			  (
			    select LISTAGG(replace($DB_NEOS$FN_GetMultiLang(#langCode#, cm.comp_name_multi),',','/'), ',') WITHIN GROUP(ORDER BY replace(cm.comp_name,',','/'))   
			    from t_co_groupping_comp gc
			    join $DB_NEOS$t_co_comp cc on gc.comp_seq = cc.comp_seq and cc.use_yn = 'Y'
			    join $DB_NEOS$v_t_co_comp_multi cm on cc.comp_seq = cm.comp_seq
			    where gc.groupping_seq = a.groupping_seq
			  ) as comp_name_str
			  from $DB_NEOS$t_co_groupping a
			  
              <isNotEqual property="userSe" compareValue="MASTER">
		      join $DB_NEOS$t_co_groupping_comp aa on a.groupping_seq = aa.groupping_seq and aa.comp_seq = #loginCompSeq# and aa.use_yn = 'Y'    			
			  </isNotEqual>			  
			  
			  where a.use_yn = 'Y'
			  order by a.groupping_order
			) groupping
			union
			select * from 
			(
			  select
			  concat('C|',c.comp_seq) as emp_uniq_group,
			  $DB_NEOS$FN_GetMultiLang(#langCode#,cm.comp_name_multi) as emp_uniq_group_name,
			  c.comp_seq as comp_seq_str,
			  ' ' as comp_name_str
			  from $DB_NEOS$t_co_comp c
			  join $DB_NEOS$v_t_co_comp_multi cm on c.comp_seq = cm.comp_seq and c.use_yn = 'Y'
			  <isNotEqual property="userSe" compareValue="MASTER">
			  where c.comp_seq = #loginCompSeq#
			  </isNotEqual>					  
			  order by c.order_num
			) comp
   		</select>
   		
   		<select id="OrgChart.getAllCompCnt" parameterClass="hashMap" resultClass="String">
			select count(*) as cnt from $DB_NEOS$t_co_comp where use_yn = 'Y'
   		</select>   		
   		
   		
   		<insert id="OrgChart.tempDutyPositionInsert" parameterClass="hashMap">
			INSERT IGNORE INTO $DB_NEOS$t_co_comp_duty_position VALUES
				('99999',#groupSeq#,0,'DUTY','Y','99999','SYSTEM',SYSDATE,null,null),
				('99999',#groupSeq#,0,'POSITION','Y','99999','SYSTEM',SYSDATE,null,null)
   		</insert>
   		
   		
   		<insert id="OrgChart.tempDutyPositionMultiInsert" parameterClass="hashMap">
	   		INSERT IGNORE INTO $DB_NEOS$t_co_comp_duty_position_multi VALUES
				('99999','kr',#groupSeq#,0,'DUTY','-','','','Y','SYSTEM',SYSDATE,null,null),
				('99999','kr',#groupSeq#,0,'POSITION','-','','','Y','SYSTEM',SYSDATE,null,null)
   		</insert>      		
   
</sqlMap>